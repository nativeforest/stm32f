
adc_interrupt_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e38  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001ef8  08001ef8  00011ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001f38  08001f38  00011f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001f3c  08001f3c  00011f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000458  20000004  08001f44  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000045c  08001f44  0002045c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000958b  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000162a  00000000  00000000  000295b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000470  00000000  00000000  0002abe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  0002b058  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002528  00000000  00000000  0002b420  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001807  00000000  00000000  0002d948  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002f14f  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000ddc  00000000  00000000  0002f1cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001ee0 	.word	0x08001ee0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001ee0 	.word	0x08001ee0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	4a07      	ldr	r2, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000228:	6812      	ldr	r2, [r2, #0]
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f001 fd33 	bl	8001ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f001 fbca 	bl	80019e8 <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 fdde 	bl	8000e24 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 fdb1 	bl	8000dd8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	2000040c 	.word	0x2000040c

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	2000040c 	.word	0x2000040c

080002ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80002b4:	230f      	movs	r3, #15
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	2200      	movs	r2, #0
 80002ba:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80002bc:	2300      	movs	r3, #0
 80002be:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d101      	bne.n	80002ca <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80002c6:	2301      	movs	r3, #1
 80002c8:	e124      	b.n	8000514 <HAL_ADC_Init+0x268>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d10a      	bne.n	80002e8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2200      	movs	r2, #0
 80002d6:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2240      	movs	r2, #64	; 0x40
 80002dc:	2100      	movs	r1, #0
 80002de:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	0018      	movs	r0, r3
 80002e4:	f001 fd06 	bl	8001cf4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ec:	2210      	movs	r2, #16
 80002ee:	4013      	ands	r3, r2
 80002f0:	d000      	beq.n	80002f4 <HAL_ADC_Init+0x48>
 80002f2:	e102      	b.n	80004fa <HAL_ADC_Init+0x24e>
 80002f4:	230f      	movs	r3, #15
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d000      	beq.n	8000300 <HAL_ADC_Init+0x54>
 80002fe:	e0fc      	b.n	80004fa <HAL_ADC_Init+0x24e>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	2204      	movs	r2, #4
 8000308:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800030a:	d000      	beq.n	800030e <HAL_ADC_Init+0x62>
 800030c:	e0f5      	b.n	80004fa <HAL_ADC_Init+0x24e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000312:	4a82      	ldr	r2, [pc, #520]	; (800051c <HAL_ADC_Init+0x270>)
 8000314:	4013      	ands	r3, r2
 8000316:	2202      	movs	r2, #2
 8000318:	431a      	orrs	r2, r3
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	2203      	movs	r2, #3
 8000326:	4013      	ands	r3, r2
 8000328:	2b01      	cmp	r3, #1
 800032a:	d112      	bne.n	8000352 <HAL_ADC_Init+0xa6>
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2201      	movs	r2, #1
 8000334:	4013      	ands	r3, r2
 8000336:	2b01      	cmp	r3, #1
 8000338:	d009      	beq.n	800034e <HAL_ADC_Init+0xa2>
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	68da      	ldr	r2, [r3, #12]
 8000340:	2380      	movs	r3, #128	; 0x80
 8000342:	021b      	lsls	r3, r3, #8
 8000344:	401a      	ands	r2, r3
 8000346:	2380      	movs	r3, #128	; 0x80
 8000348:	021b      	lsls	r3, r3, #8
 800034a:	429a      	cmp	r2, r3
 800034c:	d101      	bne.n	8000352 <HAL_ADC_Init+0xa6>
 800034e:	2301      	movs	r3, #1
 8000350:	e000      	b.n	8000354 <HAL_ADC_Init+0xa8>
 8000352:	2300      	movs	r3, #0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d116      	bne.n	8000386 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	687a      	ldr	r2, [r7, #4]
 800035e:	6812      	ldr	r2, [r2, #0]
 8000360:	68d2      	ldr	r2, [r2, #12]
 8000362:	2118      	movs	r1, #24
 8000364:	438a      	bics	r2, r1
 8000366:	0011      	movs	r1, r2
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	6892      	ldr	r2, [r2, #8]
 800036c:	430a      	orrs	r2, r1
 800036e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	6812      	ldr	r2, [r2, #0]
 8000378:	6912      	ldr	r2, [r2, #16]
 800037a:	0092      	lsls	r2, r2, #2
 800037c:	0891      	lsrs	r1, r2, #2
 800037e:	687a      	ldr	r2, [r7, #4]
 8000380:	6852      	ldr	r2, [r2, #4]
 8000382:	430a      	orrs	r2, r1
 8000384:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	6812      	ldr	r2, [r2, #0]
 800038e:	68d2      	ldr	r2, [r2, #12]
 8000390:	4963      	ldr	r1, [pc, #396]	; (8000520 <HAL_ADC_Init+0x274>)
 8000392:	400a      	ands	r2, r1
 8000394:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	69db      	ldr	r3, [r3, #28]
 80003a0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80003a2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	6a1b      	ldr	r3, [r3, #32]
 80003a8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80003aa:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d002      	beq.n	80003ba <HAL_ADC_Init+0x10e>
 80003b4:	2380      	movs	r3, #128	; 0x80
 80003b6:	015b      	lsls	r3, r3, #5
 80003b8:	e000      	b.n	80003bc <HAL_ADC_Init+0x110>
 80003ba:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80003bc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                   |
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80003c2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	691b      	ldr	r3, [r3, #16]
 80003c8:	2b02      	cmp	r3, #2
 80003ca:	d101      	bne.n	80003d0 <HAL_ADC_Init+0x124>
 80003cc:	2304      	movs	r3, #4
 80003ce:	e000      	b.n	80003d2 <HAL_ADC_Init+0x126>
 80003d0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                   |
 80003d2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d8:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80003da:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80003dc:	68ba      	ldr	r2, [r7, #8]
 80003de:	4313      	orrs	r3, r2
 80003e0:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d115      	bne.n	8000416 <HAL_ADC_Init+0x16a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	6a1b      	ldr	r3, [r3, #32]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d105      	bne.n	80003fe <HAL_ADC_Init+0x152>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80003f2:	68bb      	ldr	r3, [r7, #8]
 80003f4:	2280      	movs	r2, #128	; 0x80
 80003f6:	0252      	lsls	r2, r2, #9
 80003f8:	4313      	orrs	r3, r2
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	e00b      	b.n	8000416 <HAL_ADC_Init+0x16a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000402:	2220      	movs	r2, #32
 8000404:	431a      	orrs	r2, r3
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800040e:	2201      	movs	r2, #1
 8000410:	431a      	orrs	r2, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800041a:	23c2      	movs	r3, #194	; 0xc2
 800041c:	33ff      	adds	r3, #255	; 0xff
 800041e:	429a      	cmp	r2, r3
 8000420:	d007      	beq.n	8000432 <HAL_ADC_Init+0x186>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                    hadc->Init.ExternalTrigConvEdge );
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800042a:	4313      	orrs	r3, r2
 800042c:	68ba      	ldr	r2, [r7, #8]
 800042e:	4313      	orrs	r3, r2
 8000430:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	6812      	ldr	r2, [r2, #0]
 800043a:	68d1      	ldr	r1, [r2, #12]
 800043c:	68ba      	ldr	r2, [r7, #8]
 800043e:	430a      	orrs	r2, r1
 8000440:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000446:	2380      	movs	r3, #128	; 0x80
 8000448:	055b      	lsls	r3, r3, #21
 800044a:	429a      	cmp	r2, r3
 800044c:	d01b      	beq.n	8000486 <HAL_ADC_Init+0x1da>
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000452:	2b01      	cmp	r3, #1
 8000454:	d017      	beq.n	8000486 <HAL_ADC_Init+0x1da>
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800045a:	2b02      	cmp	r3, #2
 800045c:	d013      	beq.n	8000486 <HAL_ADC_Init+0x1da>
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000462:	2b03      	cmp	r3, #3
 8000464:	d00f      	beq.n	8000486 <HAL_ADC_Init+0x1da>
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800046a:	2b04      	cmp	r3, #4
 800046c:	d00b      	beq.n	8000486 <HAL_ADC_Init+0x1da>
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000472:	2b05      	cmp	r3, #5
 8000474:	d007      	beq.n	8000486 <HAL_ADC_Init+0x1da>
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800047a:	2b06      	cmp	r3, #6
 800047c:	d003      	beq.n	8000486 <HAL_ADC_Init+0x1da>
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000482:	2b07      	cmp	r3, #7
 8000484:	d112      	bne.n	80004ac <HAL_ADC_Init+0x200>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	687a      	ldr	r2, [r7, #4]
 800048c:	6812      	ldr	r2, [r2, #0]
 800048e:	6952      	ldr	r2, [r2, #20]
 8000490:	2107      	movs	r1, #7
 8000492:	438a      	bics	r2, r1
 8000494:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	6812      	ldr	r2, [r2, #0]
 800049e:	6951      	ldr	r1, [r2, #20]
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80004a4:	2007      	movs	r0, #7
 80004a6:	4002      	ands	r2, r0
 80004a8:	430a      	orrs	r2, r1
 80004aa:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	68db      	ldr	r3, [r3, #12]
 80004b2:	4a1c      	ldr	r2, [pc, #112]	; (8000524 <HAL_ADC_Init+0x278>)
 80004b4:	401a      	ands	r2, r3
 80004b6:	68bb      	ldr	r3, [r7, #8]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	d10b      	bne.n	80004d4 <HAL_ADC_Init+0x228>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2200      	movs	r2, #0
 80004c0:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004c6:	2203      	movs	r2, #3
 80004c8:	4393      	bics	r3, r2
 80004ca:	2201      	movs	r2, #1
 80004cc:	431a      	orrs	r2, r3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	645a      	str	r2, [r3, #68]	; 0x44
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80004d2:	e01c      	b.n	800050e <HAL_ADC_Init+0x262>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004d8:	2212      	movs	r2, #18
 80004da:	4393      	bics	r3, r2
 80004dc:	2210      	movs	r2, #16
 80004de:	431a      	orrs	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004e8:	2201      	movs	r2, #1
 80004ea:	431a      	orrs	r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 80004f0:	230f      	movs	r3, #15
 80004f2:	18fb      	adds	r3, r7, r3
 80004f4:	2201      	movs	r2, #1
 80004f6:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80004f8:	e009      	b.n	800050e <HAL_ADC_Init+0x262>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004fe:	2210      	movs	r2, #16
 8000500:	431a      	orrs	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	645a      	str	r2, [r3, #68]	; 0x44
        
    tmp_hal_status = HAL_ERROR;
 8000506:	230f      	movs	r3, #15
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	2201      	movs	r2, #1
 800050c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800050e:	230f      	movs	r3, #15
 8000510:	18fb      	adds	r3, r7, r3
 8000512:	781b      	ldrb	r3, [r3, #0]
}
 8000514:	0018      	movs	r0, r3
 8000516:	46bd      	mov	sp, r7
 8000518:	b004      	add	sp, #16
 800051a:	bd80      	pop	{r7, pc}
 800051c:	fffffefd 	.word	0xfffffefd
 8000520:	fffe0219 	.word	0xfffe0219
 8000524:	833fffe7 	.word	0x833fffe7

08000528 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000530:	230f      	movs	r3, #15
 8000532:	18fb      	adds	r3, r7, r3
 8000534:	2200      	movs	r2, #0
 8000536:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	2204      	movs	r2, #4
 8000540:	4013      	ands	r3, r2
 8000542:	d156      	bne.n	80005f2 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2240      	movs	r2, #64	; 0x40
 8000548:	5c9b      	ldrb	r3, [r3, r2]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d101      	bne.n	8000552 <HAL_ADC_Start_IT+0x2a>
 800054e:	2302      	movs	r3, #2
 8000550:	e056      	b.n	8000600 <HAL_ADC_Start_IT+0xd8>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2240      	movs	r2, #64	; 0x40
 8000556:	2101      	movs	r1, #1
 8000558:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d007      	beq.n	8000572 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000562:	230f      	movs	r3, #15
 8000564:	18fc      	adds	r4, r7, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	0018      	movs	r0, r3
 800056a:	f000 fa63 	bl	8000a34 <ADC_Enable>
 800056e:	0003      	movs	r3, r0
 8000570:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000572:	230f      	movs	r3, #15
 8000574:	18fb      	adds	r3, r7, r3
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d13e      	bne.n	80005fa <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000580:	4a21      	ldr	r2, [pc, #132]	; (8000608 <HAL_ADC_Start_IT+0xe0>)
 8000582:	4013      	ands	r3, r2
 8000584:	2280      	movs	r2, #128	; 0x80
 8000586:	0052      	lsls	r2, r2, #1
 8000588:	431a      	orrs	r2, r3
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2200      	movs	r2, #0
 8000592:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2240      	movs	r2, #64	; 0x40
 8000598:	2100      	movs	r1, #0
 800059a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	221c      	movs	r2, #28
 80005a2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	2b08      	cmp	r3, #8
 80005aa:	d110      	bne.n	80005ce <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	6812      	ldr	r2, [r2, #0]
 80005b4:	6852      	ldr	r2, [r2, #4]
 80005b6:	2104      	movs	r1, #4
 80005b8:	438a      	bics	r2, r1
 80005ba:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	6812      	ldr	r2, [r2, #0]
 80005c4:	6852      	ldr	r2, [r2, #4]
 80005c6:	2118      	movs	r1, #24
 80005c8:	430a      	orrs	r2, r1
 80005ca:	605a      	str	r2, [r3, #4]
          break;
 80005cc:	e008      	b.n	80005e0 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	6812      	ldr	r2, [r2, #0]
 80005d6:	6852      	ldr	r2, [r2, #4]
 80005d8:	211c      	movs	r1, #28
 80005da:	430a      	orrs	r2, r1
 80005dc:	605a      	str	r2, [r3, #4]
          break;
 80005de:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	6812      	ldr	r2, [r2, #0]
 80005e8:	6892      	ldr	r2, [r2, #8]
 80005ea:	2104      	movs	r1, #4
 80005ec:	430a      	orrs	r2, r1
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	e003      	b.n	80005fa <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80005f2:	230f      	movs	r3, #15
 80005f4:	18fb      	adds	r3, r7, r3
 80005f6:	2202      	movs	r2, #2
 80005f8:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 80005fa:	230f      	movs	r3, #15
 80005fc:	18fb      	adds	r3, r7, r3
 80005fe:	781b      	ldrb	r3, [r3, #0]
}
 8000600:	0018      	movs	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	b005      	add	sp, #20
 8000606:	bd90      	pop	{r4, r7, pc}
 8000608:	fffff0fe 	.word	0xfffff0fe

0800060c <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000614:	230f      	movs	r3, #15
 8000616:	18fb      	adds	r3, r7, r3
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2240      	movs	r2, #64	; 0x40
 8000620:	5c9b      	ldrb	r3, [r3, r2]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d101      	bne.n	800062a <HAL_ADC_Stop_IT+0x1e>
 8000626:	2302      	movs	r3, #2
 8000628:	e034      	b.n	8000694 <HAL_ADC_Stop_IT+0x88>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2240      	movs	r2, #64	; 0x40
 800062e:	2101      	movs	r1, #1
 8000630:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000632:	230f      	movs	r3, #15
 8000634:	18fc      	adds	r4, r7, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	0018      	movs	r0, r3
 800063a:	f000 fae0 	bl	8000bfe <ADC_ConversionStop>
 800063e:	0003      	movs	r3, r0
 8000640:	7023      	strb	r3, [r4, #0]
   
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000642:	230f      	movs	r3, #15
 8000644:	18fb      	adds	r3, r7, r3
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d11c      	bne.n	8000686 <HAL_ADC_Stop_IT+0x7a>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	6812      	ldr	r2, [r2, #0]
 8000654:	6852      	ldr	r2, [r2, #4]
 8000656:	211c      	movs	r1, #28
 8000658:	438a      	bics	r2, r1
 800065a:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800065c:	230f      	movs	r3, #15
 800065e:	18fc      	adds	r4, r7, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	0018      	movs	r0, r3
 8000664:	f000 fa62 	bl	8000b2c <ADC_Disable>
 8000668:	0003      	movs	r3, r0
 800066a:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800066c:	230f      	movs	r3, #15
 800066e:	18fb      	adds	r3, r7, r3
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d107      	bne.n	8000686 <HAL_ADC_Stop_IT+0x7a>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067a:	4a08      	ldr	r2, [pc, #32]	; (800069c <HAL_ADC_Stop_IT+0x90>)
 800067c:	4013      	ands	r3, r2
 800067e:	2201      	movs	r2, #1
 8000680:	431a      	orrs	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2240      	movs	r2, #64	; 0x40
 800068a:	2100      	movs	r1, #0
 800068c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800068e:	230f      	movs	r3, #15
 8000690:	18fb      	adds	r3, r7, r3
 8000692:	781b      	ldrb	r3, [r3, #0]
}
 8000694:	0018      	movs	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	b005      	add	sp, #20
 800069a:	bd90      	pop	{r4, r7, pc}
 800069c:	fffffefe 	.word	0xfffffefe

080006a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80006ae:	0018      	movs	r0, r3
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b002      	add	sp, #8
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2204      	movs	r2, #4
 80006c8:	4013      	ands	r3, r2
 80006ca:	2b04      	cmp	r3, #4
 80006cc:	d106      	bne.n	80006dc <HAL_ADC_IRQHandler+0x24>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	2204      	movs	r2, #4
 80006d6:	4013      	ands	r3, r2
 80006d8:	2b04      	cmp	r3, #4
 80006da:	d00d      	beq.n	80006f8 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2208      	movs	r2, #8
 80006e4:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80006e6:	2b08      	cmp	r3, #8
 80006e8:	d14f      	bne.n	800078a <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	2208      	movs	r2, #8
 80006f2:	4013      	ands	r3, r2
 80006f4:	2b08      	cmp	r3, #8
 80006f6:	d148      	bne.n	800078a <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fc:	2210      	movs	r2, #16
 80006fe:	4013      	ands	r3, r2
 8000700:	d106      	bne.n	8000710 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000706:	2280      	movs	r2, #128	; 0x80
 8000708:	0092      	lsls	r2, r2, #2
 800070a:	431a      	orrs	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	68da      	ldr	r2, [r3, #12]
 8000716:	23c0      	movs	r3, #192	; 0xc0
 8000718:	011b      	lsls	r3, r3, #4
 800071a:	4013      	ands	r3, r2
 800071c:	d12d      	bne.n	800077a <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6a1b      	ldr	r3, [r3, #32]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000722:	2b00      	cmp	r3, #0
 8000724:	d129      	bne.n	800077a <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2208      	movs	r2, #8
 800072e:	4013      	ands	r3, r2
 8000730:	2b08      	cmp	r3, #8
 8000732:	d122      	bne.n	800077a <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	2204      	movs	r2, #4
 800073c:	4013      	ands	r3, r2
 800073e:	d110      	bne.n	8000762 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	6812      	ldr	r2, [r2, #0]
 8000748:	6852      	ldr	r2, [r2, #4]
 800074a:	210c      	movs	r1, #12
 800074c:	438a      	bics	r2, r1
 800074e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000754:	4a32      	ldr	r2, [pc, #200]	; (8000820 <HAL_ADC_IRQHandler+0x168>)
 8000756:	4013      	ands	r3, r2
 8000758:	2201      	movs	r2, #1
 800075a:	431a      	orrs	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	645a      	str	r2, [r3, #68]	; 0x44
 8000760:	e00b      	b.n	800077a <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000766:	2220      	movs	r2, #32
 8000768:	431a      	orrs	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000772:	2201      	movs	r2, #1
 8000774:	431a      	orrs	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Conversion complete callback */
    /* Note: into callback, to determine if conversion has been triggered     */
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
      HAL_ADC_ConvCpltCallback(hadc);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	0018      	movs	r0, r3
 800077e:	f001 f965 	bl	8001a4c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	220c      	movs	r2, #12
 8000788:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2280      	movs	r2, #128	; 0x80
 8000792:	4013      	ands	r3, r2
 8000794:	2b80      	cmp	r3, #128	; 0x80
 8000796:	d115      	bne.n	80007c4 <HAL_ADC_IRQHandler+0x10c>
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	2280      	movs	r2, #128	; 0x80
 80007a0:	4013      	ands	r3, r2
 80007a2:	2b80      	cmp	r3, #128	; 0x80
 80007a4:	d10e      	bne.n	80007c4 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007aa:	2280      	movs	r2, #128	; 0x80
 80007ac:	0252      	lsls	r2, r2, #9
 80007ae:	431a      	orrs	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Level out of window callback */ 
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 f834 	bl	8000824 <HAL_ADC_LevelOutOfWindowCallback>
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2280      	movs	r2, #128	; 0x80
 80007c2:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2210      	movs	r2, #16
 80007cc:	4013      	ands	r3, r2
 80007ce:	2b10      	cmp	r3, #16
 80007d0:	d122      	bne.n	8000818 <HAL_ADC_IRQHandler+0x160>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	2210      	movs	r2, #16
 80007da:	4013      	ands	r3, r2
 80007dc:	2b10      	cmp	r3, #16
 80007de:	d11b      	bne.n	8000818 <HAL_ADC_IRQHandler+0x160>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d005      	beq.n	80007f4 <HAL_ADC_IRQHandler+0x13c>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	2201      	movs	r2, #1
 80007f0:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80007f2:	d00d      	beq.n	8000810 <HAL_ADC_IRQHandler+0x158>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007f8:	2202      	movs	r2, #2
 80007fa:	431a      	orrs	r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2210      	movs	r2, #16
 8000806:	601a      	str	r2, [r3, #0]
      
      /* Error callback */ 
      HAL_ADC_ErrorCallback(hadc);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	0018      	movs	r0, r3
 800080c:	f000 f812 	bl	8000834 <HAL_ADC_ErrorCallback>
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2210      	movs	r2, #16
 8000816:	601a      	str	r2, [r3, #0]
  }

}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	b002      	add	sp, #8
 800081e:	bd80      	pop	{r7, pc}
 8000820:	fffffefe 	.word	0xfffffefe

08000824 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	b002      	add	sp, #8
 8000832:	bd80      	pop	{r7, pc}

08000834 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	b002      	add	sp, #8
 8000842:	bd80      	pop	{r7, pc}

08000844 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800084e:	230f      	movs	r3, #15
 8000850:	18fb      	adds	r3, r7, r3
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800085e:	2380      	movs	r3, #128	; 0x80
 8000860:	055b      	lsls	r3, r3, #21
 8000862:	429a      	cmp	r2, r3
 8000864:	d011      	beq.n	800088a <HAL_ADC_ConfigChannel+0x46>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800086a:	2b01      	cmp	r3, #1
 800086c:	d00d      	beq.n	800088a <HAL_ADC_ConfigChannel+0x46>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000872:	2b02      	cmp	r3, #2
 8000874:	d009      	beq.n	800088a <HAL_ADC_ConfigChannel+0x46>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800087a:	2b03      	cmp	r3, #3
 800087c:	d005      	beq.n	800088a <HAL_ADC_ConfigChannel+0x46>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000882:	2b04      	cmp	r3, #4
 8000884:	d001      	beq.n	800088a <HAL_ADC_ConfigChannel+0x46>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2240      	movs	r2, #64	; 0x40
 800088e:	5c9b      	ldrb	r3, [r3, r2]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d101      	bne.n	8000898 <HAL_ADC_ConfigChannel+0x54>
 8000894:	2302      	movs	r3, #2
 8000896:	e0bc      	b.n	8000a12 <HAL_ADC_ConfigChannel+0x1ce>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2240      	movs	r2, #64	; 0x40
 800089c:	2101      	movs	r1, #1
 800089e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	2204      	movs	r2, #4
 80008a8:	4013      	ands	r3, r2
 80008aa:	d000      	beq.n	80008ae <HAL_ADC_ConfigChannel+0x6a>
 80008ac:	e0a0      	b.n	80009f0 <HAL_ADC_ConfigChannel+0x1ac>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	4a5a      	ldr	r2, [pc, #360]	; (8000a1c <HAL_ADC_ConfigChannel+0x1d8>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d100      	bne.n	80008ba <HAL_ADC_ConfigChannel+0x76>
 80008b8:	e078      	b.n	80009ac <HAL_ADC_ConfigChannel+0x168>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	6812      	ldr	r2, [r2, #0]
 80008c2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80008c4:	683a      	ldr	r2, [r7, #0]
 80008c6:	6812      	ldr	r2, [r2, #0]
 80008c8:	2001      	movs	r0, #1
 80008ca:	4090      	lsls	r0, r2
 80008cc:	0002      	movs	r2, r0
 80008ce:	430a      	orrs	r2, r1
 80008d0:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008d6:	2380      	movs	r3, #128	; 0x80
 80008d8:	055b      	lsls	r3, r3, #21
 80008da:	429a      	cmp	r2, r3
 80008dc:	d037      	beq.n	800094e <HAL_ADC_ConfigChannel+0x10a>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d033      	beq.n	800094e <HAL_ADC_ConfigChannel+0x10a>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d02f      	beq.n	800094e <HAL_ADC_ConfigChannel+0x10a>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008f2:	2b03      	cmp	r3, #3
 80008f4:	d02b      	beq.n	800094e <HAL_ADC_ConfigChannel+0x10a>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	d027      	beq.n	800094e <HAL_ADC_ConfigChannel+0x10a>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000902:	2b05      	cmp	r3, #5
 8000904:	d023      	beq.n	800094e <HAL_ADC_ConfigChannel+0x10a>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800090a:	2b06      	cmp	r3, #6
 800090c:	d01f      	beq.n	800094e <HAL_ADC_ConfigChannel+0x10a>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000912:	2b07      	cmp	r3, #7
 8000914:	d01b      	beq.n	800094e <HAL_ADC_ConfigChannel+0x10a>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	689a      	ldr	r2, [r3, #8]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	2107      	movs	r1, #7
 8000922:	400b      	ands	r3, r1
 8000924:	429a      	cmp	r2, r3
 8000926:	d012      	beq.n	800094e <HAL_ADC_ConfigChannel+0x10a>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	6812      	ldr	r2, [r2, #0]
 8000930:	6952      	ldr	r2, [r2, #20]
 8000932:	2107      	movs	r1, #7
 8000934:	438a      	bics	r2, r1
 8000936:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	6812      	ldr	r2, [r2, #0]
 8000940:	6951      	ldr	r1, [r2, #20]
 8000942:	683a      	ldr	r2, [r7, #0]
 8000944:	6892      	ldr	r2, [r2, #8]
 8000946:	2007      	movs	r0, #7
 8000948:	4002      	ands	r2, r0
 800094a:	430a      	orrs	r2, r1
 800094c:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b10      	cmp	r3, #16
 8000954:	d003      	beq.n	800095e <HAL_ADC_ConfigChannel+0x11a>
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b11      	cmp	r3, #17
 800095c:	d152      	bne.n	8000a04 <HAL_ADC_ConfigChannel+0x1c0>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800095e:	4a30      	ldr	r2, [pc, #192]	; (8000a20 <HAL_ADC_ConfigChannel+0x1dc>)
 8000960:	4b2f      	ldr	r3, [pc, #188]	; (8000a20 <HAL_ADC_ConfigChannel+0x1dc>)
 8000962:	6819      	ldr	r1, [r3, #0]
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b10      	cmp	r3, #16
 800096a:	d102      	bne.n	8000972 <HAL_ADC_ConfigChannel+0x12e>
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	041b      	lsls	r3, r3, #16
 8000970:	e001      	b.n	8000976 <HAL_ADC_ConfigChannel+0x132>
 8000972:	2380      	movs	r3, #128	; 0x80
 8000974:	03db      	lsls	r3, r3, #15
 8000976:	430b      	orrs	r3, r1
 8000978:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b10      	cmp	r3, #16
 8000980:	d140      	bne.n	8000a04 <HAL_ADC_ConfigChannel+0x1c0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000982:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <HAL_ADC_ConfigChannel+0x1e0>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4928      	ldr	r1, [pc, #160]	; (8000a28 <HAL_ADC_ConfigChannel+0x1e4>)
 8000988:	0018      	movs	r0, r3
 800098a:	f7ff fbbd 	bl	8000108 <__udivsi3>
 800098e:	0003      	movs	r3, r0
 8000990:	001a      	movs	r2, r3
 8000992:	0013      	movs	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	189b      	adds	r3, r3, r2
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800099c:	e002      	b.n	80009a4 <HAL_ADC_ConfigChannel+0x160>
          {
            wait_loop_index--;
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	3b01      	subs	r3, #1
 80009a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d1f9      	bne.n	800099e <HAL_ADC_ConfigChannel+0x15a>
 80009aa:	e02b      	b.n	8000a04 <HAL_ADC_ConfigChannel+0x1c0>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	6812      	ldr	r2, [r2, #0]
 80009b4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80009b6:	683a      	ldr	r2, [r7, #0]
 80009b8:	6812      	ldr	r2, [r2, #0]
 80009ba:	2001      	movs	r0, #1
 80009bc:	4090      	lsls	r0, r2
 80009be:	0002      	movs	r2, r0
 80009c0:	43d2      	mvns	r2, r2
 80009c2:	400a      	ands	r2, r1
 80009c4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b10      	cmp	r3, #16
 80009cc:	d003      	beq.n	80009d6 <HAL_ADC_ConfigChannel+0x192>
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b11      	cmp	r3, #17
 80009d4:	d116      	bne.n	8000a04 <HAL_ADC_ConfigChannel+0x1c0>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <HAL_ADC_ConfigChannel+0x1dc>)
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <HAL_ADC_ConfigChannel+0x1dc>)
 80009da:	6819      	ldr	r1, [r3, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b10      	cmp	r3, #16
 80009e2:	d101      	bne.n	80009e8 <HAL_ADC_ConfigChannel+0x1a4>
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <HAL_ADC_ConfigChannel+0x1e8>)
 80009e6:	e000      	b.n	80009ea <HAL_ADC_ConfigChannel+0x1a6>
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_ADC_ConfigChannel+0x1ec>)
 80009ea:	400b      	ands	r3, r1
 80009ec:	6013      	str	r3, [r2, #0]
 80009ee:	e009      	b.n	8000a04 <HAL_ADC_ConfigChannel+0x1c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f4:	2220      	movs	r2, #32
 80009f6:	431a      	orrs	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 80009fc:	230f      	movs	r3, #15
 80009fe:	18fb      	adds	r3, r7, r3
 8000a00:	2201      	movs	r2, #1
 8000a02:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2240      	movs	r2, #64	; 0x40
 8000a08:	2100      	movs	r1, #0
 8000a0a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000a0c:	230f      	movs	r3, #15
 8000a0e:	18fb      	adds	r3, r7, r3
 8000a10:	781b      	ldrb	r3, [r3, #0]
}
 8000a12:	0018      	movs	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b004      	add	sp, #16
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	00001001 	.word	0x00001001
 8000a20:	40012708 	.word	0x40012708
 8000a24:	20000000 	.word	0x20000000
 8000a28:	000f4240 	.word	0x000f4240
 8000a2c:	ff7fffff 	.word	0xff7fffff
 8000a30:	ffbfffff 	.word	0xffbfffff

08000a34 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d112      	bne.n	8000a78 <ADC_Enable+0x44>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2201      	movs	r2, #1
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d009      	beq.n	8000a74 <ADC_Enable+0x40>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	68da      	ldr	r2, [r3, #12]
 8000a66:	2380      	movs	r3, #128	; 0x80
 8000a68:	021b      	lsls	r3, r3, #8
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	021b      	lsls	r3, r3, #8
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d101      	bne.n	8000a78 <ADC_Enable+0x44>
 8000a74:	2301      	movs	r3, #1
 8000a76:	e000      	b.n	8000a7a <ADC_Enable+0x46>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d14b      	bne.n	8000b16 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	4a26      	ldr	r2, [pc, #152]	; (8000b20 <ADC_Enable+0xec>)
 8000a86:	4013      	ands	r3, r2
 8000a88:	d00d      	beq.n	8000aa6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	2210      	movs	r2, #16
 8000a90:	431a      	orrs	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	645a      	str	r2, [r3, #68]	; 0x44
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	431a      	orrs	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e038      	b.n	8000b18 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	6812      	ldr	r2, [r2, #0]
 8000aae:	6892      	ldr	r2, [r2, #8]
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ab6:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <ADC_Enable+0xf0>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	491b      	ldr	r1, [pc, #108]	; (8000b28 <ADC_Enable+0xf4>)
 8000abc:	0018      	movs	r0, r3
 8000abe:	f7ff fb23 	bl	8000108 <__udivsi3>
 8000ac2:	0003      	movs	r3, r0
 8000ac4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000ac6:	e002      	b.n	8000ace <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d1f9      	bne.n	8000ac8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ad4:	f7ff fbe0 	bl	8000298 <HAL_GetTick>
 8000ad8:	0003      	movs	r3, r0
 8000ada:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000adc:	e014      	b.n	8000b08 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000ade:	f7ff fbdb 	bl	8000298 <HAL_GetTick>
 8000ae2:	0002      	movs	r2, r0
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d90d      	bls.n	8000b08 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af0:	2210      	movs	r2, #16
 8000af2:	431a      	orrs	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000afc:	2201      	movs	r2, #1
 8000afe:	431a      	orrs	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e007      	b.n	8000b18 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4013      	ands	r3, r2
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d1e3      	bne.n	8000ade <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000b16:	2300      	movs	r3, #0
}
 8000b18:	0018      	movs	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b004      	add	sp, #16
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	80000017 	.word	0x80000017
 8000b24:	20000000 	.word	0x20000000
 8000b28:	000f4240 	.word	0x000f4240

08000b2c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	2203      	movs	r2, #3
 8000b40:	4013      	ands	r3, r2
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d112      	bne.n	8000b6c <ADC_Disable+0x40>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4013      	ands	r3, r2
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d009      	beq.n	8000b68 <ADC_Disable+0x3c>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	68da      	ldr	r2, [r3, #12]
 8000b5a:	2380      	movs	r3, #128	; 0x80
 8000b5c:	021b      	lsls	r3, r3, #8
 8000b5e:	401a      	ands	r2, r3
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	021b      	lsls	r3, r3, #8
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d101      	bne.n	8000b6c <ADC_Disable+0x40>
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e000      	b.n	8000b6e <ADC_Disable+0x42>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d040      	beq.n	8000bf4 <ADC_Disable+0xc8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	2205      	movs	r2, #5
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d110      	bne.n	8000ba2 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	6812      	ldr	r2, [r2, #0]
 8000b88:	6892      	ldr	r2, [r2, #8]
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2203      	movs	r2, #3
 8000b96:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000b98:	f7ff fb7e 	bl	8000298 <HAL_GetTick>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000ba0:	e022      	b.n	8000be8 <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	2210      	movs	r2, #16
 8000ba8:	431a      	orrs	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e01b      	b.n	8000bf6 <ADC_Disable+0xca>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000bbe:	f7ff fb6b 	bl	8000298 <HAL_GetTick>
 8000bc2:	0002      	movs	r2, r0
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d90d      	bls.n	8000be8 <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd0:	2210      	movs	r2, #16
 8000bd2:	431a      	orrs	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bdc:	2201      	movs	r2, #1
 8000bde:	431a      	orrs	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	e006      	b.n	8000bf6 <ADC_Disable+0xca>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	d1e4      	bne.n	8000bbe <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b004      	add	sp, #16
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	2204      	movs	r2, #4
 8000c12:	4013      	ands	r3, r2
 8000c14:	d033      	beq.n	8000c7e <ADC_ConversionStop+0x80>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	2204      	movs	r2, #4
 8000c1e:	4013      	ands	r3, r2
 8000c20:	d00d      	beq.n	8000c3e <ADC_ConversionStop+0x40>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	2202      	movs	r2, #2
 8000c2a:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000c2c:	d107      	bne.n	8000c3e <ADC_ConversionStop+0x40>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	6812      	ldr	r2, [r2, #0]
 8000c36:	6892      	ldr	r2, [r2, #8]
 8000c38:	2110      	movs	r1, #16
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000c3e:	f7ff fb2b 	bl	8000298 <HAL_GetTick>
 8000c42:	0003      	movs	r3, r0
 8000c44:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000c46:	e014      	b.n	8000c72 <ADC_ConversionStop+0x74>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000c48:	f7ff fb26 	bl	8000298 <HAL_GetTick>
 8000c4c:	0002      	movs	r2, r0
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d90d      	bls.n	8000c72 <ADC_ConversionStop+0x74>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	2210      	movs	r2, #16
 8000c5c:	431a      	orrs	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c66:	2201      	movs	r2, #1
 8000c68:	431a      	orrs	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e006      	b.n	8000c80 <ADC_ConversionStop+0x82>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	2204      	movs	r2, #4
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	d1e4      	bne.n	8000c48 <ADC_ConversionStop+0x4a>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	0018      	movs	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b004      	add	sp, #16
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	0002      	movs	r2, r0
 8000c90:	1dfb      	adds	r3, r7, #7
 8000c92:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <NVIC_EnableIRQ+0x28>)
 8000c96:	1dfa      	adds	r2, r7, #7
 8000c98:	7812      	ldrb	r2, [r2, #0]
 8000c9a:	0011      	movs	r1, r2
 8000c9c:	221f      	movs	r2, #31
 8000c9e:	400a      	ands	r2, r1
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	4091      	lsls	r1, r2
 8000ca4:	000a      	movs	r2, r1
 8000ca6:	601a      	str	r2, [r3, #0]
}
 8000ca8:	46c0      	nop			; (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b002      	add	sp, #8
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	e000e100 	.word	0xe000e100

08000cb4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b5b0      	push	{r4, r5, r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	0002      	movs	r2, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b7f      	cmp	r3, #127	; 0x7f
 8000cc8:	d932      	bls.n	8000d30 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cca:	4c2f      	ldr	r4, [pc, #188]	; (8000d88 <NVIC_SetPriority+0xd4>)
 8000ccc:	1dfb      	adds	r3, r7, #7
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	001a      	movs	r2, r3
 8000cd2:	230f      	movs	r3, #15
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	3b08      	subs	r3, #8
 8000cd8:	0899      	lsrs	r1, r3, #2
 8000cda:	4a2b      	ldr	r2, [pc, #172]	; (8000d88 <NVIC_SetPriority+0xd4>)
 8000cdc:	1dfb      	adds	r3, r7, #7
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	4003      	ands	r3, r0
 8000ce6:	3b08      	subs	r3, #8
 8000ce8:	089b      	lsrs	r3, r3, #2
 8000cea:	3306      	adds	r3, #6
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	18d3      	adds	r3, r2, r3
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	1dfa      	adds	r2, r7, #7
 8000cf6:	7812      	ldrb	r2, [r2, #0]
 8000cf8:	0010      	movs	r0, r2
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	4002      	ands	r2, r0
 8000cfe:	00d2      	lsls	r2, r2, #3
 8000d00:	20ff      	movs	r0, #255	; 0xff
 8000d02:	4090      	lsls	r0, r2
 8000d04:	0002      	movs	r2, r0
 8000d06:	43d2      	mvns	r2, r2
 8000d08:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	019b      	lsls	r3, r3, #6
 8000d0e:	20ff      	movs	r0, #255	; 0xff
 8000d10:	4018      	ands	r0, r3
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	001d      	movs	r5, r3
 8000d18:	2303      	movs	r3, #3
 8000d1a:	402b      	ands	r3, r5
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	4098      	lsls	r0, r3
 8000d20:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d22:	431a      	orrs	r2, r3
 8000d24:	1d8b      	adds	r3, r1, #6
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	18e3      	adds	r3, r4, r3
 8000d2a:	3304      	adds	r3, #4
 8000d2c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d2e:	e027      	b.n	8000d80 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d30:	4c16      	ldr	r4, [pc, #88]	; (8000d8c <NVIC_SetPriority+0xd8>)
 8000d32:	1dfb      	adds	r3, r7, #7
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b25b      	sxtb	r3, r3
 8000d38:	089b      	lsrs	r3, r3, #2
 8000d3a:	4914      	ldr	r1, [pc, #80]	; (8000d8c <NVIC_SetPriority+0xd8>)
 8000d3c:	1dfa      	adds	r2, r7, #7
 8000d3e:	7812      	ldrb	r2, [r2, #0]
 8000d40:	b252      	sxtb	r2, r2
 8000d42:	0892      	lsrs	r2, r2, #2
 8000d44:	32c0      	adds	r2, #192	; 0xc0
 8000d46:	0092      	lsls	r2, r2, #2
 8000d48:	5852      	ldr	r2, [r2, r1]
 8000d4a:	1df9      	adds	r1, r7, #7
 8000d4c:	7809      	ldrb	r1, [r1, #0]
 8000d4e:	0008      	movs	r0, r1
 8000d50:	2103      	movs	r1, #3
 8000d52:	4001      	ands	r1, r0
 8000d54:	00c9      	lsls	r1, r1, #3
 8000d56:	20ff      	movs	r0, #255	; 0xff
 8000d58:	4088      	lsls	r0, r1
 8000d5a:	0001      	movs	r1, r0
 8000d5c:	43c9      	mvns	r1, r1
 8000d5e:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d60:	683a      	ldr	r2, [r7, #0]
 8000d62:	0192      	lsls	r2, r2, #6
 8000d64:	20ff      	movs	r0, #255	; 0xff
 8000d66:	4010      	ands	r0, r2
 8000d68:	1dfa      	adds	r2, r7, #7
 8000d6a:	7812      	ldrb	r2, [r2, #0]
 8000d6c:	0015      	movs	r5, r2
 8000d6e:	2203      	movs	r2, #3
 8000d70:	402a      	ands	r2, r5
 8000d72:	00d2      	lsls	r2, r2, #3
 8000d74:	4090      	lsls	r0, r2
 8000d76:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	33c0      	adds	r3, #192	; 0xc0
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	511a      	str	r2, [r3, r4]
}
 8000d80:	46c0      	nop			; (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b002      	add	sp, #8
 8000d86:	bdb0      	pop	{r4, r5, r7, pc}
 8000d88:	e000ed00 	.word	0xe000ed00
 8000d8c:	e000e100 	.word	0xe000e100

08000d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	4a0c      	ldr	r2, [pc, #48]	; (8000dd0 <SysTick_Config+0x40>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d901      	bls.n	8000da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da2:	2301      	movs	r3, #1
 8000da4:	e010      	b.n	8000dc8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <SysTick_Config+0x44>)
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	3a01      	subs	r2, #1
 8000dac:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dae:	2301      	movs	r3, #1
 8000db0:	425b      	negs	r3, r3
 8000db2:	2103      	movs	r1, #3
 8000db4:	0018      	movs	r0, r3
 8000db6:	f7ff ff7d 	bl	8000cb4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <SysTick_Config+0x44>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <SysTick_Config+0x44>)
 8000dc2:	2207      	movs	r2, #7
 8000dc4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc6:	2300      	movs	r3, #0
}
 8000dc8:	0018      	movs	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b002      	add	sp, #8
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	00ffffff 	.word	0x00ffffff
 8000dd4:	e000e010 	.word	0xe000e010

08000dd8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	230f      	movs	r3, #15
 8000de4:	18fb      	adds	r3, r7, r3
 8000de6:	1c02      	adds	r2, r0, #0
 8000de8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	230f      	movs	r3, #15
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	b25b      	sxtb	r3, r3
 8000df4:	0011      	movs	r1, r2
 8000df6:	0018      	movs	r0, r3
 8000df8:	f7ff ff5c 	bl	8000cb4 <NVIC_SetPriority>
}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b004      	add	sp, #16
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	1dfb      	adds	r3, r7, #7
 8000e0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e10:	1dfb      	adds	r3, r7, #7
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b25b      	sxtb	r3, r3
 8000e16:	0018      	movs	r0, r3
 8000e18:	f7ff ff36 	bl	8000c88 <NVIC_EnableIRQ>
}
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b002      	add	sp, #8
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f7ff ffae 	bl	8000d90 <SysTick_Config>
 8000e34:	0003      	movs	r3, r0
}
 8000e36:	0018      	movs	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b002      	add	sp, #8
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	d106      	bne.n	8000e5c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000e50:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000e52:	6812      	ldr	r2, [r2, #0]
 8000e54:	2104      	movs	r1, #4
 8000e56:	430a      	orrs	r2, r1
 8000e58:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000e5a:	e005      	b.n	8000e68 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000e5e:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000e60:	6812      	ldr	r2, [r2, #0]
 8000e62:	2104      	movs	r1, #4
 8000e64:	438a      	bics	r2, r1
 8000e66:	601a      	str	r2, [r3, #0]
}
 8000e68:	46c0      	nop			; (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b002      	add	sp, #8
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	e000e010 	.word	0xe000e010

08000e74 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000e78:	f000 f803 	bl	8000e82 <HAL_SYSTICK_Callback>
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000ea2:	e14f      	b.n	8001144 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	697a      	ldr	r2, [r7, #20]
 8000eac:	4091      	lsls	r1, r2
 8000eae:	000a      	movs	r2, r1
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d100      	bne.n	8000ebc <HAL_GPIO_Init+0x30>
 8000eba:	e140      	b.n	800113e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d003      	beq.n	8000ecc <HAL_GPIO_Init+0x40>
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2b12      	cmp	r3, #18
 8000eca:	d123      	bne.n	8000f14 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	08da      	lsrs	r2, r3, #3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3208      	adds	r2, #8
 8000ed4:	0092      	lsls	r2, r2, #2
 8000ed6:	58d3      	ldr	r3, [r2, r3]
 8000ed8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	2207      	movs	r2, #7
 8000ede:	4013      	ands	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	220f      	movs	r2, #15
 8000ee4:	409a      	lsls	r2, r3
 8000ee6:	0013      	movs	r3, r2
 8000ee8:	43da      	mvns	r2, r3
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	691a      	ldr	r2, [r3, #16]
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	2107      	movs	r1, #7
 8000ef8:	400b      	ands	r3, r1
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	409a      	lsls	r2, r3
 8000efe:	0013      	movs	r3, r2
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	08da      	lsrs	r2, r3, #3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3208      	adds	r2, #8
 8000f0e:	0092      	lsls	r2, r2, #2
 8000f10:	6939      	ldr	r1, [r7, #16]
 8000f12:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	409a      	lsls	r2, r3
 8000f22:	0013      	movs	r3, r2
 8000f24:	43da      	mvns	r2, r3
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2203      	movs	r2, #3
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	409a      	lsls	r2, r3
 8000f3a:	0013      	movs	r3, r2
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d00b      	beq.n	8000f68 <HAL_GPIO_Init+0xdc>
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d007      	beq.n	8000f68 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f5c:	2b11      	cmp	r3, #17
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2b12      	cmp	r3, #18
 8000f66:	d130      	bne.n	8000fca <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	409a      	lsls	r2, r3
 8000f76:	0013      	movs	r3, r2
 8000f78:	43da      	mvns	r2, r3
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68da      	ldr	r2, [r3, #12]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	409a      	lsls	r2, r3
 8000f8a:	0013      	movs	r3, r2
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	0013      	movs	r3, r2
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	091b      	lsrs	r3, r3, #4
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	409a      	lsls	r2, r3
 8000fbc:	0013      	movs	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	689a      	ldr	r2, [r3, #8]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	409a      	lsls	r2, r3
 8000fec:	0013      	movs	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	055b      	lsls	r3, r3, #21
 8001002:	4013      	ands	r3, r2
 8001004:	d100      	bne.n	8001008 <HAL_GPIO_Init+0x17c>
 8001006:	e09a      	b.n	800113e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001008:	4b54      	ldr	r3, [pc, #336]	; (800115c <HAL_GPIO_Init+0x2d0>)
 800100a:	4a54      	ldr	r2, [pc, #336]	; (800115c <HAL_GPIO_Init+0x2d0>)
 800100c:	6992      	ldr	r2, [r2, #24]
 800100e:	2101      	movs	r1, #1
 8001010:	430a      	orrs	r2, r1
 8001012:	619a      	str	r2, [r3, #24]
 8001014:	4b51      	ldr	r3, [pc, #324]	; (800115c <HAL_GPIO_Init+0x2d0>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	2201      	movs	r2, #1
 800101a:	4013      	ands	r3, r2
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8001020:	4a4f      	ldr	r2, [pc, #316]	; (8001160 <HAL_GPIO_Init+0x2d4>)
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	089b      	lsrs	r3, r3, #2
 8001026:	3302      	adds	r3, #2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	589b      	ldr	r3, [r3, r2]
 800102c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	2203      	movs	r2, #3
 8001032:	4013      	ands	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	220f      	movs	r2, #15
 8001038:	409a      	lsls	r2, r3
 800103a:	0013      	movs	r3, r2
 800103c:	43da      	mvns	r2, r3
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	2390      	movs	r3, #144	; 0x90
 8001048:	05db      	lsls	r3, r3, #23
 800104a:	429a      	cmp	r2, r3
 800104c:	d013      	beq.n	8001076 <HAL_GPIO_Init+0x1ea>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a44      	ldr	r2, [pc, #272]	; (8001164 <HAL_GPIO_Init+0x2d8>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d00d      	beq.n	8001072 <HAL_GPIO_Init+0x1e6>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a43      	ldr	r2, [pc, #268]	; (8001168 <HAL_GPIO_Init+0x2dc>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d007      	beq.n	800106e <HAL_GPIO_Init+0x1e2>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a42      	ldr	r2, [pc, #264]	; (800116c <HAL_GPIO_Init+0x2e0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d101      	bne.n	800106a <HAL_GPIO_Init+0x1de>
 8001066:	2303      	movs	r3, #3
 8001068:	e006      	b.n	8001078 <HAL_GPIO_Init+0x1ec>
 800106a:	2305      	movs	r3, #5
 800106c:	e004      	b.n	8001078 <HAL_GPIO_Init+0x1ec>
 800106e:	2302      	movs	r3, #2
 8001070:	e002      	b.n	8001078 <HAL_GPIO_Init+0x1ec>
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <HAL_GPIO_Init+0x1ec>
 8001076:	2300      	movs	r3, #0
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	2103      	movs	r1, #3
 800107c:	400a      	ands	r2, r1
 800107e:	0092      	lsls	r2, r2, #2
 8001080:	4093      	lsls	r3, r2
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001088:	4935      	ldr	r1, [pc, #212]	; (8001160 <HAL_GPIO_Init+0x2d4>)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	3302      	adds	r3, #2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001096:	4b36      	ldr	r3, [pc, #216]	; (8001170 <HAL_GPIO_Init+0x2e4>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	43da      	mvns	r2, r3
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	025b      	lsls	r3, r3, #9
 80010ae:	4013      	ands	r3, r2
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010ba:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <HAL_GPIO_Init+0x2e4>)
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80010c0:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <HAL_GPIO_Init+0x2e4>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	43da      	mvns	r2, r3
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	029b      	lsls	r3, r3, #10
 80010d8:	4013      	ands	r3, r2
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010e4:	4b22      	ldr	r3, [pc, #136]	; (8001170 <HAL_GPIO_Init+0x2e4>)
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ea:	4b21      	ldr	r3, [pc, #132]	; (8001170 <HAL_GPIO_Init+0x2e4>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	43da      	mvns	r2, r3
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	035b      	lsls	r3, r3, #13
 8001102:	4013      	ands	r3, r2
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <HAL_GPIO_Init+0x2e4>)
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001114:	4b16      	ldr	r3, [pc, #88]	; (8001170 <HAL_GPIO_Init+0x2e4>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	43da      	mvns	r2, r3
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	039b      	lsls	r3, r3, #14
 800112c:	4013      	ands	r3, r2
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001138:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <HAL_GPIO_Init+0x2e4>)
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	3301      	adds	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	40da      	lsrs	r2, r3
 800114c:	1e13      	subs	r3, r2, #0
 800114e:	d000      	beq.n	8001152 <HAL_GPIO_Init+0x2c6>
 8001150:	e6a8      	b.n	8000ea4 <HAL_GPIO_Init+0x18>
  } 
}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	46bd      	mov	sp, r7
 8001156:	b006      	add	sp, #24
 8001158:	bd80      	pop	{r7, pc}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	40021000 	.word	0x40021000
 8001160:	40010000 	.word	0x40010000
 8001164:	48000400 	.word	0x48000400
 8001168:	48000800 	.word	0x48000800
 800116c:	48000c00 	.word	0x48000c00
 8001170:	40010400 	.word	0x40010400

08001174 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2201      	movs	r2, #1
 8001186:	4013      	ands	r3, r2
 8001188:	d100      	bne.n	800118c <HAL_RCC_OscConfig+0x18>
 800118a:	e08d      	b.n	80012a8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800118c:	4bc3      	ldr	r3, [pc, #780]	; (800149c <HAL_RCC_OscConfig+0x328>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	220c      	movs	r2, #12
 8001192:	4013      	ands	r3, r2
 8001194:	2b04      	cmp	r3, #4
 8001196:	d00e      	beq.n	80011b6 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001198:	4bc0      	ldr	r3, [pc, #768]	; (800149c <HAL_RCC_OscConfig+0x328>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	220c      	movs	r2, #12
 800119e:	4013      	ands	r3, r2
 80011a0:	2b08      	cmp	r3, #8
 80011a2:	d116      	bne.n	80011d2 <HAL_RCC_OscConfig+0x5e>
 80011a4:	4bbd      	ldr	r3, [pc, #756]	; (800149c <HAL_RCC_OscConfig+0x328>)
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	025b      	lsls	r3, r3, #9
 80011ac:	401a      	ands	r2, r3
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	025b      	lsls	r3, r3, #9
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d10d      	bne.n	80011d2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b6:	4bb9      	ldr	r3, [pc, #740]	; (800149c <HAL_RCC_OscConfig+0x328>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	029b      	lsls	r3, r3, #10
 80011be:	4013      	ands	r3, r2
 80011c0:	d100      	bne.n	80011c4 <HAL_RCC_OscConfig+0x50>
 80011c2:	e070      	b.n	80012a6 <HAL_RCC_OscConfig+0x132>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d000      	beq.n	80011ce <HAL_RCC_OscConfig+0x5a>
 80011cc:	e06b      	b.n	80012a6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e2b5      	b.n	800173e <HAL_RCC_OscConfig+0x5ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d107      	bne.n	80011ea <HAL_RCC_OscConfig+0x76>
 80011da:	4bb0      	ldr	r3, [pc, #704]	; (800149c <HAL_RCC_OscConfig+0x328>)
 80011dc:	4aaf      	ldr	r2, [pc, #700]	; (800149c <HAL_RCC_OscConfig+0x328>)
 80011de:	6812      	ldr	r2, [r2, #0]
 80011e0:	2180      	movs	r1, #128	; 0x80
 80011e2:	0249      	lsls	r1, r1, #9
 80011e4:	430a      	orrs	r2, r1
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	e02f      	b.n	800124a <HAL_RCC_OscConfig+0xd6>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10c      	bne.n	800120c <HAL_RCC_OscConfig+0x98>
 80011f2:	4baa      	ldr	r3, [pc, #680]	; (800149c <HAL_RCC_OscConfig+0x328>)
 80011f4:	4aa9      	ldr	r2, [pc, #676]	; (800149c <HAL_RCC_OscConfig+0x328>)
 80011f6:	6812      	ldr	r2, [r2, #0]
 80011f8:	49a9      	ldr	r1, [pc, #676]	; (80014a0 <HAL_RCC_OscConfig+0x32c>)
 80011fa:	400a      	ands	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	4ba7      	ldr	r3, [pc, #668]	; (800149c <HAL_RCC_OscConfig+0x328>)
 8001200:	4aa6      	ldr	r2, [pc, #664]	; (800149c <HAL_RCC_OscConfig+0x328>)
 8001202:	6812      	ldr	r2, [r2, #0]
 8001204:	49a7      	ldr	r1, [pc, #668]	; (80014a4 <HAL_RCC_OscConfig+0x330>)
 8001206:	400a      	ands	r2, r1
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	e01e      	b.n	800124a <HAL_RCC_OscConfig+0xd6>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b05      	cmp	r3, #5
 8001212:	d10e      	bne.n	8001232 <HAL_RCC_OscConfig+0xbe>
 8001214:	4ba1      	ldr	r3, [pc, #644]	; (800149c <HAL_RCC_OscConfig+0x328>)
 8001216:	4aa1      	ldr	r2, [pc, #644]	; (800149c <HAL_RCC_OscConfig+0x328>)
 8001218:	6812      	ldr	r2, [r2, #0]
 800121a:	2180      	movs	r1, #128	; 0x80
 800121c:	02c9      	lsls	r1, r1, #11
 800121e:	430a      	orrs	r2, r1
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	4b9e      	ldr	r3, [pc, #632]	; (800149c <HAL_RCC_OscConfig+0x328>)
 8001224:	4a9d      	ldr	r2, [pc, #628]	; (800149c <HAL_RCC_OscConfig+0x328>)
 8001226:	6812      	ldr	r2, [r2, #0]
 8001228:	2180      	movs	r1, #128	; 0x80
 800122a:	0249      	lsls	r1, r1, #9
 800122c:	430a      	orrs	r2, r1
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	e00b      	b.n	800124a <HAL_RCC_OscConfig+0xd6>
 8001232:	4b9a      	ldr	r3, [pc, #616]	; (800149c <HAL_RCC_OscConfig+0x328>)
 8001234:	4a99      	ldr	r2, [pc, #612]	; (800149c <HAL_RCC_OscConfig+0x328>)
 8001236:	6812      	ldr	r2, [r2, #0]
 8001238:	4999      	ldr	r1, [pc, #612]	; (80014a0 <HAL_RCC_OscConfig+0x32c>)
 800123a:	400a      	ands	r2, r1
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	4b97      	ldr	r3, [pc, #604]	; (800149c <HAL_RCC_OscConfig+0x328>)
 8001240:	4a96      	ldr	r2, [pc, #600]	; (800149c <HAL_RCC_OscConfig+0x328>)
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	4997      	ldr	r1, [pc, #604]	; (80014a4 <HAL_RCC_OscConfig+0x330>)
 8001246:	400a      	ands	r2, r1
 8001248:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d014      	beq.n	800127c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001252:	f7ff f821 	bl	8000298 <HAL_GetTick>
 8001256:	0003      	movs	r3, r0
 8001258:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800125c:	f7ff f81c 	bl	8000298 <HAL_GetTick>
 8001260:	0002      	movs	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b64      	cmp	r3, #100	; 0x64
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e267      	b.n	800173e <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126e:	4b8b      	ldr	r3, [pc, #556]	; (800149c <HAL_RCC_OscConfig+0x328>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	2380      	movs	r3, #128	; 0x80
 8001274:	029b      	lsls	r3, r3, #10
 8001276:	4013      	ands	r3, r2
 8001278:	d0f0      	beq.n	800125c <HAL_RCC_OscConfig+0xe8>
 800127a:	e015      	b.n	80012a8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127c:	f7ff f80c 	bl	8000298 <HAL_GetTick>
 8001280:	0003      	movs	r3, r0
 8001282:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001286:	f7ff f807 	bl	8000298 <HAL_GetTick>
 800128a:	0002      	movs	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b64      	cmp	r3, #100	; 0x64
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e252      	b.n	800173e <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001298:	4b80      	ldr	r3, [pc, #512]	; (800149c <HAL_RCC_OscConfig+0x328>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	029b      	lsls	r3, r3, #10
 80012a0:	4013      	ands	r3, r2
 80012a2:	d1f0      	bne.n	8001286 <HAL_RCC_OscConfig+0x112>
 80012a4:	e000      	b.n	80012a8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2202      	movs	r2, #2
 80012ae:	4013      	ands	r3, r2
 80012b0:	d100      	bne.n	80012b4 <HAL_RCC_OscConfig+0x140>
 80012b2:	e069      	b.n	8001388 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012b4:	4b79      	ldr	r3, [pc, #484]	; (800149c <HAL_RCC_OscConfig+0x328>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	220c      	movs	r2, #12
 80012ba:	4013      	ands	r3, r2
 80012bc:	d00b      	beq.n	80012d6 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012be:	4b77      	ldr	r3, [pc, #476]	; (800149c <HAL_RCC_OscConfig+0x328>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	220c      	movs	r2, #12
 80012c4:	4013      	ands	r3, r2
 80012c6:	2b08      	cmp	r3, #8
 80012c8:	d11c      	bne.n	8001304 <HAL_RCC_OscConfig+0x190>
 80012ca:	4b74      	ldr	r3, [pc, #464]	; (800149c <HAL_RCC_OscConfig+0x328>)
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	2380      	movs	r3, #128	; 0x80
 80012d0:	025b      	lsls	r3, r3, #9
 80012d2:	4013      	ands	r3, r2
 80012d4:	d116      	bne.n	8001304 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d6:	4b71      	ldr	r3, [pc, #452]	; (800149c <HAL_RCC_OscConfig+0x328>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2202      	movs	r2, #2
 80012dc:	4013      	ands	r3, r2
 80012de:	d005      	beq.n	80012ec <HAL_RCC_OscConfig+0x178>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d001      	beq.n	80012ec <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e228      	b.n	800173e <HAL_RCC_OscConfig+0x5ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ec:	4a6b      	ldr	r2, [pc, #428]	; (800149c <HAL_RCC_OscConfig+0x328>)
 80012ee:	4b6b      	ldr	r3, [pc, #428]	; (800149c <HAL_RCC_OscConfig+0x328>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	21f8      	movs	r1, #248	; 0xf8
 80012f4:	438b      	bics	r3, r1
 80012f6:	0019      	movs	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	430b      	orrs	r3, r1
 8001300:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001302:	e041      	b.n	8001388 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d024      	beq.n	8001356 <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800130c:	4b63      	ldr	r3, [pc, #396]	; (800149c <HAL_RCC_OscConfig+0x328>)
 800130e:	4a63      	ldr	r2, [pc, #396]	; (800149c <HAL_RCC_OscConfig+0x328>)
 8001310:	6812      	ldr	r2, [r2, #0]
 8001312:	2101      	movs	r1, #1
 8001314:	430a      	orrs	r2, r1
 8001316:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7fe ffbe 	bl	8000298 <HAL_GetTick>
 800131c:	0003      	movs	r3, r0
 800131e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001322:	f7fe ffb9 	bl	8000298 <HAL_GetTick>
 8001326:	0002      	movs	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e204      	b.n	800173e <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001334:	4b59      	ldr	r3, [pc, #356]	; (800149c <HAL_RCC_OscConfig+0x328>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2202      	movs	r2, #2
 800133a:	4013      	ands	r3, r2
 800133c:	d0f1      	beq.n	8001322 <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133e:	4a57      	ldr	r2, [pc, #348]	; (800149c <HAL_RCC_OscConfig+0x328>)
 8001340:	4b56      	ldr	r3, [pc, #344]	; (800149c <HAL_RCC_OscConfig+0x328>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	21f8      	movs	r1, #248	; 0xf8
 8001346:	438b      	bics	r3, r1
 8001348:	0019      	movs	r1, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	430b      	orrs	r3, r1
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	e018      	b.n	8001388 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001356:	4b51      	ldr	r3, [pc, #324]	; (800149c <HAL_RCC_OscConfig+0x328>)
 8001358:	4a50      	ldr	r2, [pc, #320]	; (800149c <HAL_RCC_OscConfig+0x328>)
 800135a:	6812      	ldr	r2, [r2, #0]
 800135c:	2101      	movs	r1, #1
 800135e:	438a      	bics	r2, r1
 8001360:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001362:	f7fe ff99 	bl	8000298 <HAL_GetTick>
 8001366:	0003      	movs	r3, r0
 8001368:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800136c:	f7fe ff94 	bl	8000298 <HAL_GetTick>
 8001370:	0002      	movs	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e1df      	b.n	800173e <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800137e:	4b47      	ldr	r3, [pc, #284]	; (800149c <HAL_RCC_OscConfig+0x328>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2202      	movs	r2, #2
 8001384:	4013      	ands	r3, r2
 8001386:	d1f1      	bne.n	800136c <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2208      	movs	r2, #8
 800138e:	4013      	ands	r3, r2
 8001390:	d036      	beq.n	8001400 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d019      	beq.n	80013ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800139a:	4b40      	ldr	r3, [pc, #256]	; (800149c <HAL_RCC_OscConfig+0x328>)
 800139c:	4a3f      	ldr	r2, [pc, #252]	; (800149c <HAL_RCC_OscConfig+0x328>)
 800139e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013a0:	2101      	movs	r1, #1
 80013a2:	430a      	orrs	r2, r1
 80013a4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a6:	f7fe ff77 	bl	8000298 <HAL_GetTick>
 80013aa:	0003      	movs	r3, r0
 80013ac:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b0:	f7fe ff72 	bl	8000298 <HAL_GetTick>
 80013b4:	0002      	movs	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e1bd      	b.n	800173e <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c2:	4b36      	ldr	r3, [pc, #216]	; (800149c <HAL_RCC_OscConfig+0x328>)
 80013c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c6:	2202      	movs	r2, #2
 80013c8:	4013      	ands	r3, r2
 80013ca:	d0f1      	beq.n	80013b0 <HAL_RCC_OscConfig+0x23c>
 80013cc:	e018      	b.n	8001400 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ce:	4b33      	ldr	r3, [pc, #204]	; (800149c <HAL_RCC_OscConfig+0x328>)
 80013d0:	4a32      	ldr	r2, [pc, #200]	; (800149c <HAL_RCC_OscConfig+0x328>)
 80013d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013d4:	2101      	movs	r1, #1
 80013d6:	438a      	bics	r2, r1
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013da:	f7fe ff5d 	bl	8000298 <HAL_GetTick>
 80013de:	0003      	movs	r3, r0
 80013e0:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e4:	f7fe ff58 	bl	8000298 <HAL_GetTick>
 80013e8:	0002      	movs	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e1a3      	b.n	800173e <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f6:	4b29      	ldr	r3, [pc, #164]	; (800149c <HAL_RCC_OscConfig+0x328>)
 80013f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fa:	2202      	movs	r2, #2
 80013fc:	4013      	ands	r3, r2
 80013fe:	d1f1      	bne.n	80013e4 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2204      	movs	r2, #4
 8001406:	4013      	ands	r3, r2
 8001408:	d100      	bne.n	800140c <HAL_RCC_OscConfig+0x298>
 800140a:	e0b5      	b.n	8001578 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 800140c:	2317      	movs	r3, #23
 800140e:	18fb      	adds	r3, r7, r3
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001414:	4b21      	ldr	r3, [pc, #132]	; (800149c <HAL_RCC_OscConfig+0x328>)
 8001416:	69da      	ldr	r2, [r3, #28]
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	055b      	lsls	r3, r3, #21
 800141c:	4013      	ands	r3, r2
 800141e:	d111      	bne.n	8001444 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001420:	4b1e      	ldr	r3, [pc, #120]	; (800149c <HAL_RCC_OscConfig+0x328>)
 8001422:	4a1e      	ldr	r2, [pc, #120]	; (800149c <HAL_RCC_OscConfig+0x328>)
 8001424:	69d2      	ldr	r2, [r2, #28]
 8001426:	2180      	movs	r1, #128	; 0x80
 8001428:	0549      	lsls	r1, r1, #21
 800142a:	430a      	orrs	r2, r1
 800142c:	61da      	str	r2, [r3, #28]
 800142e:	4b1b      	ldr	r3, [pc, #108]	; (800149c <HAL_RCC_OscConfig+0x328>)
 8001430:	69da      	ldr	r2, [r3, #28]
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	055b      	lsls	r3, r3, #21
 8001436:	4013      	ands	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800143c:	2317      	movs	r3, #23
 800143e:	18fb      	adds	r3, r7, r3
 8001440:	2201      	movs	r2, #1
 8001442:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001444:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <HAL_RCC_OscConfig+0x334>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4013      	ands	r3, r2
 800144e:	d11a      	bne.n	8001486 <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_RCC_OscConfig+0x334>)
 8001452:	4a15      	ldr	r2, [pc, #84]	; (80014a8 <HAL_RCC_OscConfig+0x334>)
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	2180      	movs	r1, #128	; 0x80
 8001458:	0049      	lsls	r1, r1, #1
 800145a:	430a      	orrs	r2, r1
 800145c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800145e:	f7fe ff1b 	bl	8000298 <HAL_GetTick>
 8001462:	0003      	movs	r3, r0
 8001464:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001468:	f7fe ff16 	bl	8000298 <HAL_GetTick>
 800146c:	0002      	movs	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	; 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e161      	b.n	800173e <HAL_RCC_OscConfig+0x5ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <HAL_RCC_OscConfig+0x334>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4013      	ands	r3, r2
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d10e      	bne.n	80014ac <HAL_RCC_OscConfig+0x338>
 800148e:	4b03      	ldr	r3, [pc, #12]	; (800149c <HAL_RCC_OscConfig+0x328>)
 8001490:	4a02      	ldr	r2, [pc, #8]	; (800149c <HAL_RCC_OscConfig+0x328>)
 8001492:	6a12      	ldr	r2, [r2, #32]
 8001494:	2101      	movs	r1, #1
 8001496:	430a      	orrs	r2, r1
 8001498:	621a      	str	r2, [r3, #32]
 800149a:	e035      	b.n	8001508 <HAL_RCC_OscConfig+0x394>
 800149c:	40021000 	.word	0x40021000
 80014a0:	fffeffff 	.word	0xfffeffff
 80014a4:	fffbffff 	.word	0xfffbffff
 80014a8:	40007000 	.word	0x40007000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d10c      	bne.n	80014ce <HAL_RCC_OscConfig+0x35a>
 80014b4:	4ba4      	ldr	r3, [pc, #656]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 80014b6:	4aa4      	ldr	r2, [pc, #656]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 80014b8:	6a12      	ldr	r2, [r2, #32]
 80014ba:	2101      	movs	r1, #1
 80014bc:	438a      	bics	r2, r1
 80014be:	621a      	str	r2, [r3, #32]
 80014c0:	4ba1      	ldr	r3, [pc, #644]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 80014c2:	4aa1      	ldr	r2, [pc, #644]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 80014c4:	6a12      	ldr	r2, [r2, #32]
 80014c6:	2104      	movs	r1, #4
 80014c8:	438a      	bics	r2, r1
 80014ca:	621a      	str	r2, [r3, #32]
 80014cc:	e01c      	b.n	8001508 <HAL_RCC_OscConfig+0x394>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2b05      	cmp	r3, #5
 80014d4:	d10c      	bne.n	80014f0 <HAL_RCC_OscConfig+0x37c>
 80014d6:	4b9c      	ldr	r3, [pc, #624]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 80014d8:	4a9b      	ldr	r2, [pc, #620]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 80014da:	6a12      	ldr	r2, [r2, #32]
 80014dc:	2104      	movs	r1, #4
 80014de:	430a      	orrs	r2, r1
 80014e0:	621a      	str	r2, [r3, #32]
 80014e2:	4b99      	ldr	r3, [pc, #612]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 80014e4:	4a98      	ldr	r2, [pc, #608]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 80014e6:	6a12      	ldr	r2, [r2, #32]
 80014e8:	2101      	movs	r1, #1
 80014ea:	430a      	orrs	r2, r1
 80014ec:	621a      	str	r2, [r3, #32]
 80014ee:	e00b      	b.n	8001508 <HAL_RCC_OscConfig+0x394>
 80014f0:	4b95      	ldr	r3, [pc, #596]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 80014f2:	4a95      	ldr	r2, [pc, #596]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 80014f4:	6a12      	ldr	r2, [r2, #32]
 80014f6:	2101      	movs	r1, #1
 80014f8:	438a      	bics	r2, r1
 80014fa:	621a      	str	r2, [r3, #32]
 80014fc:	4b92      	ldr	r3, [pc, #584]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 80014fe:	4a92      	ldr	r2, [pc, #584]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 8001500:	6a12      	ldr	r2, [r2, #32]
 8001502:	2104      	movs	r1, #4
 8001504:	438a      	bics	r2, r1
 8001506:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d014      	beq.n	800153a <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001510:	f7fe fec2 	bl	8000298 <HAL_GetTick>
 8001514:	0003      	movs	r3, r0
 8001516:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001518:	e009      	b.n	800152e <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800151a:	f7fe febd 	bl	8000298 <HAL_GetTick>
 800151e:	0002      	movs	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	4a89      	ldr	r2, [pc, #548]	; (800174c <HAL_RCC_OscConfig+0x5d8>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e107      	b.n	800173e <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152e:	4b86      	ldr	r3, [pc, #536]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	2202      	movs	r2, #2
 8001534:	4013      	ands	r3, r2
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x3a6>
 8001538:	e013      	b.n	8001562 <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153a:	f7fe fead 	bl	8000298 <HAL_GetTick>
 800153e:	0003      	movs	r3, r0
 8001540:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001542:	e009      	b.n	8001558 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001544:	f7fe fea8 	bl	8000298 <HAL_GetTick>
 8001548:	0002      	movs	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	4a7f      	ldr	r2, [pc, #508]	; (800174c <HAL_RCC_OscConfig+0x5d8>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e0f2      	b.n	800173e <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001558:	4b7b      	ldr	r3, [pc, #492]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	2202      	movs	r2, #2
 800155e:	4013      	ands	r3, r2
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001562:	2317      	movs	r3, #23
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d105      	bne.n	8001578 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800156c:	4b76      	ldr	r3, [pc, #472]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 800156e:	4a76      	ldr	r2, [pc, #472]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 8001570:	69d2      	ldr	r2, [r2, #28]
 8001572:	4977      	ldr	r1, [pc, #476]	; (8001750 <HAL_RCC_OscConfig+0x5dc>)
 8001574:	400a      	ands	r2, r1
 8001576:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2210      	movs	r2, #16
 800157e:	4013      	ands	r3, r2
 8001580:	d063      	beq.n	800164a <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d12a      	bne.n	80015e0 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800158a:	4b6f      	ldr	r3, [pc, #444]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 800158c:	4a6e      	ldr	r2, [pc, #440]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 800158e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001590:	2104      	movs	r1, #4
 8001592:	430a      	orrs	r2, r1
 8001594:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001596:	4b6c      	ldr	r3, [pc, #432]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 8001598:	4a6b      	ldr	r2, [pc, #428]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 800159a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800159c:	2101      	movs	r1, #1
 800159e:	430a      	orrs	r2, r1
 80015a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a2:	f7fe fe79 	bl	8000298 <HAL_GetTick>
 80015a6:	0003      	movs	r3, r0
 80015a8:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015ac:	f7fe fe74 	bl	8000298 <HAL_GetTick>
 80015b0:	0002      	movs	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e0bf      	b.n	800173e <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015be:	4b62      	ldr	r3, [pc, #392]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 80015c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c2:	2202      	movs	r2, #2
 80015c4:	4013      	ands	r3, r2
 80015c6:	d0f1      	beq.n	80015ac <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015c8:	4a5f      	ldr	r2, [pc, #380]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 80015ca:	4b5f      	ldr	r3, [pc, #380]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 80015cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ce:	21f8      	movs	r1, #248	; 0xf8
 80015d0:	438b      	bics	r3, r1
 80015d2:	0019      	movs	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	430b      	orrs	r3, r1
 80015dc:	6353      	str	r3, [r2, #52]	; 0x34
 80015de:	e034      	b.n	800164a <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	3305      	adds	r3, #5
 80015e6:	d111      	bne.n	800160c <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80015e8:	4b57      	ldr	r3, [pc, #348]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 80015ea:	4a57      	ldr	r2, [pc, #348]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 80015ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015ee:	2104      	movs	r1, #4
 80015f0:	438a      	bics	r2, r1
 80015f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015f4:	4a54      	ldr	r2, [pc, #336]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 80015f6:	4b54      	ldr	r3, [pc, #336]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 80015f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015fa:	21f8      	movs	r1, #248	; 0xf8
 80015fc:	438b      	bics	r3, r1
 80015fe:	0019      	movs	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	430b      	orrs	r3, r1
 8001608:	6353      	str	r3, [r2, #52]	; 0x34
 800160a:	e01e      	b.n	800164a <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800160c:	4b4e      	ldr	r3, [pc, #312]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 800160e:	4a4e      	ldr	r2, [pc, #312]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 8001610:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001612:	2104      	movs	r1, #4
 8001614:	430a      	orrs	r2, r1
 8001616:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001618:	4b4b      	ldr	r3, [pc, #300]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 800161a:	4a4b      	ldr	r2, [pc, #300]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 800161c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800161e:	2101      	movs	r1, #1
 8001620:	438a      	bics	r2, r1
 8001622:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001624:	f7fe fe38 	bl	8000298 <HAL_GetTick>
 8001628:	0003      	movs	r3, r0
 800162a:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800162e:	f7fe fe33 	bl	8000298 <HAL_GetTick>
 8001632:	0002      	movs	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e07e      	b.n	800173e <HAL_RCC_OscConfig+0x5ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001640:	4b41      	ldr	r3, [pc, #260]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 8001642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001644:	2202      	movs	r2, #2
 8001646:	4013      	ands	r3, r2
 8001648:	d1f1      	bne.n	800162e <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d100      	bne.n	8001654 <HAL_RCC_OscConfig+0x4e0>
 8001652:	e073      	b.n	800173c <HAL_RCC_OscConfig+0x5c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001654:	4b3c      	ldr	r3, [pc, #240]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	220c      	movs	r2, #12
 800165a:	4013      	ands	r3, r2
 800165c:	2b08      	cmp	r3, #8
 800165e:	d100      	bne.n	8001662 <HAL_RCC_OscConfig+0x4ee>
 8001660:	e06a      	b.n	8001738 <HAL_RCC_OscConfig+0x5c4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d14b      	bne.n	8001702 <HAL_RCC_OscConfig+0x58e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166a:	4b37      	ldr	r3, [pc, #220]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 800166c:	4a36      	ldr	r2, [pc, #216]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	4938      	ldr	r1, [pc, #224]	; (8001754 <HAL_RCC_OscConfig+0x5e0>)
 8001672:	400a      	ands	r2, r1
 8001674:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7fe fe0f 	bl	8000298 <HAL_GetTick>
 800167a:	0003      	movs	r3, r0
 800167c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001680:	f7fe fe0a 	bl	8000298 <HAL_GetTick>
 8001684:	0002      	movs	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e055      	b.n	800173e <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001692:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	049b      	lsls	r3, r3, #18
 800169a:	4013      	ands	r3, r2
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800169e:	4a2a      	ldr	r2, [pc, #168]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 80016a0:	4b29      	ldr	r3, [pc, #164]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a4:	210f      	movs	r1, #15
 80016a6:	438b      	bics	r3, r1
 80016a8:	0019      	movs	r1, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ae:	430b      	orrs	r3, r1
 80016b0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80016b2:	4a25      	ldr	r2, [pc, #148]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 80016b4:	4b24      	ldr	r3, [pc, #144]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	4927      	ldr	r1, [pc, #156]	; (8001758 <HAL_RCC_OscConfig+0x5e4>)
 80016ba:	4019      	ands	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	4303      	orrs	r3, r0
 80016c6:	430b      	orrs	r3, r1
 80016c8:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ca:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 80016cc:	4a1e      	ldr	r2, [pc, #120]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	2180      	movs	r1, #128	; 0x80
 80016d2:	0449      	lsls	r1, r1, #17
 80016d4:	430a      	orrs	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7fe fdde 	bl	8000298 <HAL_GetTick>
 80016dc:	0003      	movs	r3, r0
 80016de:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x580>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e2:	f7fe fdd9 	bl	8000298 <HAL_GetTick>
 80016e6:	0002      	movs	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x580>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e024      	b.n	800173e <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	049b      	lsls	r3, r3, #18
 80016fc:	4013      	ands	r3, r2
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x56e>
 8001700:	e01c      	b.n	800173c <HAL_RCC_OscConfig+0x5c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 8001704:	4a10      	ldr	r2, [pc, #64]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	4912      	ldr	r1, [pc, #72]	; (8001754 <HAL_RCC_OscConfig+0x5e0>)
 800170a:	400a      	ands	r2, r1
 800170c:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170e:	f7fe fdc3 	bl	8000298 <HAL_GetTick>
 8001712:	0003      	movs	r3, r0
 8001714:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x5b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001718:	f7fe fdbe 	bl	8000298 <HAL_GetTick>
 800171c:	0002      	movs	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e009      	b.n	800173e <HAL_RCC_OscConfig+0x5ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172a:	4b07      	ldr	r3, [pc, #28]	; (8001748 <HAL_RCC_OscConfig+0x5d4>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	049b      	lsls	r3, r3, #18
 8001732:	4013      	ands	r3, r2
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x5a4>
 8001736:	e001      	b.n	800173c <HAL_RCC_OscConfig+0x5c8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e000      	b.n	800173e <HAL_RCC_OscConfig+0x5ca>
    }
  }
  
  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	0018      	movs	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	b006      	add	sp, #24
 8001744:	bd80      	pop	{r7, pc}
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	40021000 	.word	0x40021000
 800174c:	00001388 	.word	0x00001388
 8001750:	efffffff 	.word	0xefffffff
 8001754:	feffffff 	.word	0xfeffffff
 8001758:	ffc2ffff 	.word	0xffc2ffff

0800175c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800176a:	4b69      	ldr	r3, [pc, #420]	; (8001910 <HAL_RCC_ClockConfig+0x1b4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2201      	movs	r2, #1
 8001770:	401a      	ands	r2, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d211      	bcs.n	800179c <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001778:	4b65      	ldr	r3, [pc, #404]	; (8001910 <HAL_RCC_ClockConfig+0x1b4>)
 800177a:	4a65      	ldr	r2, [pc, #404]	; (8001910 <HAL_RCC_ClockConfig+0x1b4>)
 800177c:	6812      	ldr	r2, [r2, #0]
 800177e:	2101      	movs	r1, #1
 8001780:	438a      	bics	r2, r1
 8001782:	0011      	movs	r1, r2
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800178a:	4b61      	ldr	r3, [pc, #388]	; (8001910 <HAL_RCC_ClockConfig+0x1b4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2201      	movs	r2, #1
 8001790:	401a      	ands	r2, r3
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	429a      	cmp	r2, r3
 8001796:	d001      	beq.n	800179c <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e0b5      	b.n	8001908 <HAL_RCC_ClockConfig+0x1ac>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2202      	movs	r2, #2
 80017a2:	4013      	ands	r3, r2
 80017a4:	d009      	beq.n	80017ba <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a6:	4a5b      	ldr	r2, [pc, #364]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 80017a8:	4b5a      	ldr	r3, [pc, #360]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	21f0      	movs	r1, #240	; 0xf0
 80017ae:	438b      	bics	r3, r1
 80017b0:	0019      	movs	r1, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	430b      	orrs	r3, r1
 80017b8:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2201      	movs	r2, #1
 80017c0:	4013      	ands	r3, r2
 80017c2:	d100      	bne.n	80017c6 <HAL_RCC_ClockConfig+0x6a>
 80017c4:	e067      	b.n	8001896 <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	4b51      	ldr	r3, [pc, #324]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	2380      	movs	r3, #128	; 0x80
 80017d4:	029b      	lsls	r3, r3, #10
 80017d6:	4013      	ands	r3, r2
 80017d8:	d114      	bne.n	8001804 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e094      	b.n	8001908 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e6:	4b4b      	ldr	r3, [pc, #300]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	049b      	lsls	r3, r3, #18
 80017ee:	4013      	ands	r3, r2
 80017f0:	d108      	bne.n	8001804 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e088      	b.n	8001908 <HAL_RCC_ClockConfig+0x1ac>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f6:	4b47      	ldr	r3, [pc, #284]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2202      	movs	r2, #2
 80017fc:	4013      	ands	r3, r2
 80017fe:	d101      	bne.n	8001804 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e081      	b.n	8001908 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001804:	4a43      	ldr	r2, [pc, #268]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 8001806:	4b43      	ldr	r3, [pc, #268]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2103      	movs	r1, #3
 800180c:	438b      	bics	r3, r1
 800180e:	0019      	movs	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	430b      	orrs	r3, r1
 8001816:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001818:	f7fe fd3e 	bl	8000298 <HAL_GetTick>
 800181c:	0003      	movs	r3, r0
 800181e:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d111      	bne.n	800184c <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001828:	e009      	b.n	800183e <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182a:	f7fe fd35 	bl	8000298 <HAL_GetTick>
 800182e:	0002      	movs	r2, r0
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	4a38      	ldr	r2, [pc, #224]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e064      	b.n	8001908 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800183e:	4b35      	ldr	r3, [pc, #212]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	220c      	movs	r2, #12
 8001844:	4013      	ands	r3, r2
 8001846:	2b04      	cmp	r3, #4
 8001848:	d1ef      	bne.n	800182a <HAL_RCC_ClockConfig+0xce>
 800184a:	e024      	b.n	8001896 <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d11b      	bne.n	800188c <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001854:	e009      	b.n	800186a <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001856:	f7fe fd1f 	bl	8000298 <HAL_GetTick>
 800185a:	0002      	movs	r2, r0
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	4a2d      	ldr	r2, [pc, #180]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d901      	bls.n	800186a <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e04e      	b.n	8001908 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800186a:	4b2a      	ldr	r3, [pc, #168]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	220c      	movs	r2, #12
 8001870:	4013      	ands	r3, r2
 8001872:	2b08      	cmp	r3, #8
 8001874:	d1ef      	bne.n	8001856 <HAL_RCC_ClockConfig+0xfa>
 8001876:	e00e      	b.n	8001896 <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001878:	f7fe fd0e 	bl	8000298 <HAL_GetTick>
 800187c:	0002      	movs	r2, r0
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	4a25      	ldr	r2, [pc, #148]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d901      	bls.n	800188c <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e03d      	b.n	8001908 <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800188c:	4b21      	ldr	r3, [pc, #132]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	220c      	movs	r2, #12
 8001892:	4013      	ands	r3, r2
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001896:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <HAL_RCC_ClockConfig+0x1b4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2201      	movs	r2, #1
 800189c:	401a      	ands	r2, r3
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d911      	bls.n	80018c8 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a4:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <HAL_RCC_ClockConfig+0x1b4>)
 80018a6:	4a1a      	ldr	r2, [pc, #104]	; (8001910 <HAL_RCC_ClockConfig+0x1b4>)
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	2101      	movs	r1, #1
 80018ac:	438a      	bics	r2, r1
 80018ae:	0011      	movs	r1, r2
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018b6:	4b16      	ldr	r3, [pc, #88]	; (8001910 <HAL_RCC_ClockConfig+0x1b4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2201      	movs	r2, #1
 80018bc:	401a      	ands	r2, r3
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e01f      	b.n	8001908 <HAL_RCC_ClockConfig+0x1ac>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2204      	movs	r2, #4
 80018ce:	4013      	ands	r3, r2
 80018d0:	d008      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018d2:	4a10      	ldr	r2, [pc, #64]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	4910      	ldr	r1, [pc, #64]	; (800191c <HAL_RCC_ClockConfig+0x1c0>)
 80018da:	4019      	ands	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	430b      	orrs	r3, r1
 80018e2:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018e4:	f000 f820 	bl	8001928 <HAL_RCC_GetSysClockFreq>
 80018e8:	0001      	movs	r1, r0
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	091b      	lsrs	r3, r3, #4
 80018f0:	220f      	movs	r2, #15
 80018f2:	4013      	ands	r3, r2
 80018f4:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 80018f6:	5cd3      	ldrb	r3, [r2, r3]
 80018f8:	000a      	movs	r2, r1
 80018fa:	40da      	lsrs	r2, r3
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80018fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001900:	2000      	movs	r0, #0
 8001902:	f7fe fca1 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	0018      	movs	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	b004      	add	sp, #16
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40022000 	.word	0x40022000
 8001914:	40021000 	.word	0x40021000
 8001918:	00001388 	.word	0x00001388
 800191c:	fffff8ff 	.word	0xfffff8ff
 8001920:	08001f28 	.word	0x08001f28
 8001924:	20000000 	.word	0x20000000

08001928 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b08f      	sub	sp, #60	; 0x3c
 800192c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800192e:	2314      	movs	r3, #20
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	4a28      	ldr	r2, [pc, #160]	; (80019d4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001934:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001936:	c313      	stmia	r3!, {r0, r1, r4}
 8001938:	6812      	ldr	r2, [r2, #0]
 800193a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	4a26      	ldr	r2, [pc, #152]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001940:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001942:	c313      	stmia	r3!, {r0, r1, r4}
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800194c:	2300      	movs	r3, #0
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001950:	2300      	movs	r3, #0
 8001952:	637b      	str	r3, [r7, #52]	; 0x34
 8001954:	2300      	movs	r3, #0
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800195c:	4b1f      	ldr	r3, [pc, #124]	; (80019dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001964:	220c      	movs	r2, #12
 8001966:	4013      	ands	r3, r2
 8001968:	2b04      	cmp	r3, #4
 800196a:	d002      	beq.n	8001972 <HAL_RCC_GetSysClockFreq+0x4a>
 800196c:	2b08      	cmp	r3, #8
 800196e:	d003      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0x50>
 8001970:	e027      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001972:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001976:	e027      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0xa0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197a:	0c9b      	lsrs	r3, r3, #18
 800197c:	220f      	movs	r2, #15
 800197e:	4013      	ands	r3, r2
 8001980:	2214      	movs	r2, #20
 8001982:	18ba      	adds	r2, r7, r2
 8001984:	5cd3      	ldrb	r3, [r2, r3]
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001988:	4b14      	ldr	r3, [pc, #80]	; (80019dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198c:	220f      	movs	r2, #15
 800198e:	4013      	ands	r3, r2
 8001990:	1d3a      	adds	r2, r7, #4
 8001992:	5cd3      	ldrb	r3, [r2, r3]
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	025b      	lsls	r3, r3, #9
 800199c:	4013      	ands	r3, r2
 800199e:	d009      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80019a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019a2:	480f      	ldr	r0, [pc, #60]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019a4:	f7fe fbb0 	bl	8000108 <__udivsi3>
 80019a8:	0003      	movs	r3, r0
 80019aa:	001a      	movs	r2, r3
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	4353      	muls	r3, r2
 80019b0:	637b      	str	r3, [r7, #52]	; 0x34
 80019b2:	e003      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x94>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	4a0b      	ldr	r2, [pc, #44]	; (80019e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019b8:	4353      	muls	r3, r2
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80019bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019c0:	e002      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0xa0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019c4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019c6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80019ca:	0018      	movs	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b00f      	add	sp, #60	; 0x3c
 80019d0:	bd90      	pop	{r4, r7, pc}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	08001ef8 	.word	0x08001ef8
 80019d8:	08001f08 	.word	0x08001f08
 80019dc:	40021000 	.word	0x40021000
 80019e0:	007a1200 	.word	0x007a1200
 80019e4:	003d0900 	.word	0x003d0900

080019e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019ec:	4b02      	ldr	r3, [pc, #8]	; (80019f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	0018      	movs	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	20000000 	.word	0x20000000

080019fc <adc1_init>:
   \post adc variables are cleared isr enabled
   \return none
*/

 void adc1_init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
	ADC1->CR |= ADC_CR_ADCAL;
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <adc1_init+0x40>)
 8001a02:	4a0e      	ldr	r2, [pc, #56]	; (8001a3c <adc1_init+0x40>)
 8001a04:	6892      	ldr	r2, [r2, #8]
 8001a06:	2180      	movs	r1, #128	; 0x80
 8001a08:	0609      	lsls	r1, r1, #24
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	609a      	str	r2, [r3, #8]
	while (	((ADC1->CR & (ADC_CR_ADCAL)) != 0));
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <adc1_init+0x40>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	dbfb      	blt.n	8001a10 <adc1_init+0x14>
	memset( adc_values, 0, sizeof (adc_values));
 8001a18:	23fa      	movs	r3, #250	; 0xfa
 8001a1a:	009a      	lsls	r2, r3, #2
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <adc1_init+0x44>)
 8001a1e:	2100      	movs	r1, #0
 8001a20:	0018      	movs	r0, r3
 8001a22:	f000 fa55 	bl	8001ed0 <memset>
	adc_sample_cnt = 0;
 8001a26:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <adc1_init+0x48>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	801a      	strh	r2, [r3, #0]
	/* interrupst shall be the last  */
	HAL_ADC_Start_IT(&hadc1);
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <adc1_init+0x4c>)
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f7fe fd7a 	bl	8000528 <HAL_ADC_Start_IT>
}
 8001a34:	46c0      	nop			; (mov r8, r8)
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	40012400 	.word	0x40012400
 8001a40:	20000020 	.word	0x20000020
 8001a44:	20000408 	.word	0x20000408
 8001a48:	20000410 	.word	0x20000410

08001a4c <HAL_ADC_ConvCpltCallback>:
	HAL_ADC_Stop_IT(&hadc1);
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
		ADC_HandleTypeDef* hadc  pointer
		ADC_HandleTypeDef hadc1;  non a pointer :)


	*/
	if (hadc->Instance == ADC1) {
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a15      	ldr	r2, [pc, #84]	; (8001ab0 <HAL_ADC_ConvCpltCallback+0x64>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d124      	bne.n	8001aa8 <HAL_ADC_ConvCpltCallback+0x5c>
		if ( adc_sample_cnt < MAX_ADC_SAMPLES ) {
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <HAL_ADC_ConvCpltCallback+0x68>)
 8001a60:	881a      	ldrh	r2, [r3, #0]
 8001a62:	23f4      	movs	r3, #244	; 0xf4
 8001a64:	33ff      	adds	r3, #255	; 0xff
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d816      	bhi.n	8001a98 <HAL_ADC_ConvCpltCallback+0x4c>
			adc_values[adc_sample_cnt] = HAL_ADC_GetValue(hadc);
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_ADC_ConvCpltCallback+0x68>)
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	001c      	movs	r4, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	0018      	movs	r0, r3
 8001a74:	f7fe fe14 	bl	80006a0 <HAL_ADC_GetValue>
 8001a78:	0003      	movs	r3, r0
 8001a7a:	b299      	uxth	r1, r3
 8001a7c:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001a7e:	0062      	lsls	r2, r4, #1
 8001a80:	52d1      	strh	r1, [r2, r3]
			adc_sample_cnt++;
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <HAL_ADC_ConvCpltCallback+0x68>)
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	3301      	adds	r3, #1
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_ADC_ConvCpltCallback+0x68>)
 8001a8c:	801a      	strh	r2, [r3, #0]
			HAL_ADC_Start_IT(&hadc1);
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_ADC_ConvCpltCallback+0x70>)
 8001a90:	0018      	movs	r0, r3
 8001a92:	f7fe fd49 	bl	8000528 <HAL_ADC_Start_IT>
			HAL_ADC_Stop_IT(hadc);
		}


	}
}
 8001a96:	e007      	b.n	8001aa8 <HAL_ADC_ConvCpltCallback+0x5c>
			__HAL_ADC_CLEAR_FLAG(&hadc1, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <HAL_ADC_ConvCpltCallback+0x70>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	221c      	movs	r2, #28
 8001a9e:	601a      	str	r2, [r3, #0]
			HAL_ADC_Stop_IT(hadc);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f7fe fdb2 	bl	800060c <HAL_ADC_Stop_IT>
}
 8001aa8:	46c0      	nop			; (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b003      	add	sp, #12
 8001aae:	bd90      	pop	{r4, r7, pc}
 8001ab0:	40012400 	.word	0x40012400
 8001ab4:	20000408 	.word	0x20000408
 8001ab8:	20000020 	.word	0x20000020
 8001abc:	20000410 	.word	0x20000410

08001ac0 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ac4:	f7fe fbac 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ac8:	f000 f808 	bl	8001adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001acc:	f000 f8ca 	bl	8001c64 <MX_GPIO_Init>
  MX_ADC_Init();
 8001ad0:	f000 f86c 	bl	8001bac <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
	adc1_init();
 8001ad4:	f7ff ff92 	bl	80019fc <adc1_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <main+0x18>
	...

08001adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b090      	sub	sp, #64	; 0x40
 8001ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001ae2:	2310      	movs	r3, #16
 8001ae4:	18fb      	adds	r3, r7, r3
 8001ae6:	2212      	movs	r2, #18
 8001ae8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aea:	2310      	movs	r3, #16
 8001aec:	18fb      	adds	r3, r7, r3
 8001aee:	2201      	movs	r2, #1
 8001af0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001af2:	2310      	movs	r3, #16
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	2201      	movs	r2, #1
 8001af8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001afa:	2310      	movs	r3, #16
 8001afc:	18fb      	adds	r3, r7, r3
 8001afe:	2210      	movs	r2, #16
 8001b00:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001b02:	2310      	movs	r3, #16
 8001b04:	18fb      	adds	r3, r7, r3
 8001b06:	2210      	movs	r2, #16
 8001b08:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b0a:	2310      	movs	r3, #16
 8001b0c:	18fb      	adds	r3, r7, r3
 8001b0e:	2202      	movs	r2, #2
 8001b10:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b12:	2310      	movs	r3, #16
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	2200      	movs	r2, #0
 8001b18:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001b1a:	2310      	movs	r3, #16
 8001b1c:	18fb      	adds	r3, r7, r3
 8001b1e:	22a0      	movs	r2, #160	; 0xa0
 8001b20:	0392      	lsls	r2, r2, #14
 8001b22:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001b24:	2310      	movs	r3, #16
 8001b26:	18fb      	adds	r3, r7, r3
 8001b28:	2200      	movs	r2, #0
 8001b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b2c:	2310      	movs	r3, #16
 8001b2e:	18fb      	adds	r3, r7, r3
 8001b30:	0018      	movs	r0, r3
 8001b32:	f7ff fb1f 	bl	8001174 <HAL_RCC_OscConfig>
 8001b36:	1e03      	subs	r3, r0, #0
 8001b38:	d004      	beq.n	8001b44 <SystemClock_Config+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001b3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <SystemClock_Config+0xcc>)
 8001b3c:	218c      	movs	r1, #140	; 0x8c
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f000 f8a8 	bl	8001c94 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b44:	003b      	movs	r3, r7
 8001b46:	2207      	movs	r2, #7
 8001b48:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b4a:	003b      	movs	r3, r7
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b50:	003b      	movs	r3, r7
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b56:	003b      	movs	r3, r7
 8001b58:	2200      	movs	r2, #0
 8001b5a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b5c:	003b      	movs	r3, r7
 8001b5e:	2101      	movs	r1, #1
 8001b60:	0018      	movs	r0, r3
 8001b62:	f7ff fdfb 	bl	800175c <HAL_RCC_ClockConfig>
 8001b66:	1e03      	subs	r3, r0, #0
 8001b68:	d004      	beq.n	8001b74 <SystemClock_Config+0x98>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <SystemClock_Config+0xcc>)
 8001b6c:	2199      	movs	r1, #153	; 0x99
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f000 f890 	bl	8001c94 <_Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001b74:	f7ff ff38 	bl	80019e8 <HAL_RCC_GetHCLKFreq>
 8001b78:	0002      	movs	r2, r0
 8001b7a:	23fa      	movs	r3, #250	; 0xfa
 8001b7c:	0099      	lsls	r1, r3, #2
 8001b7e:	0010      	movs	r0, r2
 8001b80:	f7fe fac2 	bl	8000108 <__udivsi3>
 8001b84:	0003      	movs	r3, r0
 8001b86:	0018      	movs	r0, r3
 8001b88:	f7ff f94c 	bl	8000e24 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001b8c:	2004      	movs	r0, #4
 8001b8e:	f7ff f957 	bl	8000e40 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001b92:	2301      	movs	r3, #1
 8001b94:	425b      	negs	r3, r3
 8001b96:	2200      	movs	r2, #0
 8001b98:	2100      	movs	r1, #0
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f7ff f91c 	bl	8000dd8 <HAL_NVIC_SetPriority>
}
 8001ba0:	46c0      	nop			; (mov r8, r8)
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b010      	add	sp, #64	; 0x40
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	08001f18 	.word	0x08001f18

08001bac <MX_ADC_Init>:

/* ADC init function */
static void MX_ADC_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    */
  hadc1.Instance = ADC1;
 8001bb2:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <MX_ADC_Init+0xac>)
 8001bb4:	4a29      	ldr	r2, [pc, #164]	; (8001c5c <MX_ADC_Init+0xb0>)
 8001bb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001bb8:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <MX_ADC_Init+0xac>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bbe:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <MX_ADC_Init+0xac>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bc4:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <MX_ADC_Init+0xac>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001bca:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <MX_ADC_Init+0xac>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bd0:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <MX_ADC_Init+0xac>)
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001bd6:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <MX_ADC_Init+0xac>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001bdc:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <MX_ADC_Init+0xac>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001be2:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <MX_ADC_Init+0xac>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <MX_ADC_Init+0xac>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <MX_ADC_Init+0xac>)
 8001bf0:	22c2      	movs	r2, #194	; 0xc2
 8001bf2:	32ff      	adds	r2, #255	; 0xff
 8001bf4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <MX_ADC_Init+0xac>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bfc:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <MX_ADC_Init+0xac>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <MX_ADC_Init+0xac>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c08:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <MX_ADC_Init+0xac>)
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f7fe fb4e 	bl	80002ac <HAL_ADC_Init>
 8001c10:	1e03      	subs	r3, r0, #0
 8001c12:	d004      	beq.n	8001c1e <MX_ADC_Init+0x72>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <MX_ADC_Init+0xb4>)
 8001c16:	21c0      	movs	r1, #192	; 0xc0
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f000 f83b 	bl	8001c94 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel to be converted.
    */
  sConfig.Channel = ADC_CHANNEL_3;
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	2203      	movs	r2, #3
 8001c22:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	2280      	movs	r2, #128	; 0x80
 8001c28:	0152      	lsls	r2, r2, #5
 8001c2a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	2280      	movs	r2, #128	; 0x80
 8001c30:	0552      	lsls	r2, r2, #21
 8001c32:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c34:	1d3a      	adds	r2, r7, #4
 8001c36:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <MX_ADC_Init+0xac>)
 8001c38:	0011      	movs	r1, r2
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f7fe fe02 	bl	8000844 <HAL_ADC_ConfigChannel>
 8001c40:	1e03      	subs	r3, r0, #0
 8001c42:	d004      	beq.n	8001c4e <MX_ADC_Init+0xa2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <MX_ADC_Init+0xb4>)
 8001c46:	21ca      	movs	r1, #202	; 0xca
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f000 f823 	bl	8001c94 <_Error_Handler>
  }

}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b004      	add	sp, #16
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	20000410 	.word	0x20000410
 8001c5c:	40012400 	.word	0x40012400
 8001c60:	08001f18 	.word	0x08001f18

08001c64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <MX_GPIO_Init+0x2c>)
 8001c6c:	4a08      	ldr	r2, [pc, #32]	; (8001c90 <MX_GPIO_Init+0x2c>)
 8001c6e:	6952      	ldr	r2, [r2, #20]
 8001c70:	2180      	movs	r1, #128	; 0x80
 8001c72:	0289      	lsls	r1, r1, #10
 8001c74:	430a      	orrs	r2, r1
 8001c76:	615a      	str	r2, [r3, #20]
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <MX_GPIO_Init+0x2c>)
 8001c7a:	695a      	ldr	r2, [r3, #20]
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	029b      	lsls	r3, r3, #10
 8001c80:	4013      	ands	r3, r2
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]

}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	b002      	add	sp, #8
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	40021000 	.word	0x40021000

08001c94 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8001c9e:	e7fe      	b.n	8001c9e <_Error_Handler+0xa>

08001ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_MspInit+0x50>)
 8001ca8:	4a11      	ldr	r2, [pc, #68]	; (8001cf0 <HAL_MspInit+0x50>)
 8001caa:	6992      	ldr	r2, [r2, #24]
 8001cac:	2101      	movs	r1, #1
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	619a      	str	r2, [r3, #24]
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <HAL_MspInit+0x50>)
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	4013      	ands	r3, r2
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001cbe:	2305      	movs	r3, #5
 8001cc0:	425b      	negs	r3, r3
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f7ff f886 	bl	8000dd8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001ccc:	2302      	movs	r3, #2
 8001cce:	425b      	negs	r3, r3
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f7ff f87f 	bl	8000dd8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001cda:	2301      	movs	r3, #1
 8001cdc:	425b      	negs	r3, r3
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f7ff f878 	bl	8000dd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce8:	46c0      	nop			; (mov r8, r8)
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b002      	add	sp, #8
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000

08001cf4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a18      	ldr	r2, [pc, #96]	; (8001d64 <HAL_ADC_MspInit+0x70>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d129      	bne.n	8001d5a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d06:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <HAL_ADC_MspInit+0x74>)
 8001d08:	4a17      	ldr	r2, [pc, #92]	; (8001d68 <HAL_ADC_MspInit+0x74>)
 8001d0a:	6992      	ldr	r2, [r2, #24]
 8001d0c:	2180      	movs	r1, #128	; 0x80
 8001d0e:	0089      	lsls	r1, r1, #2
 8001d10:	430a      	orrs	r2, r1
 8001d12:	619a      	str	r2, [r3, #24]
 8001d14:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <HAL_ADC_MspInit+0x74>)
 8001d16:	699a      	ldr	r2, [r3, #24]
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
  
    /**ADC GPIO Configuration    
    PA3     ------> ADC_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d22:	230c      	movs	r3, #12
 8001d24:	18fb      	adds	r3, r7, r3
 8001d26:	2208      	movs	r2, #8
 8001d28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d2a:	230c      	movs	r3, #12
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	2203      	movs	r2, #3
 8001d30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	230c      	movs	r3, #12
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3a:	230c      	movs	r3, #12
 8001d3c:	18fa      	adds	r2, r7, r3
 8001d3e:	2390      	movs	r3, #144	; 0x90
 8001d40:	05db      	lsls	r3, r3, #23
 8001d42:	0011      	movs	r1, r2
 8001d44:	0018      	movs	r0, r3
 8001d46:	f7ff f8a1 	bl	8000e8c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	200c      	movs	r0, #12
 8001d50:	f7ff f842 	bl	8000dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001d54:	200c      	movs	r0, #12
 8001d56:	f7ff f855 	bl	8000e04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b008      	add	sp, #32
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	40012400 	.word	0x40012400
 8001d68:	40021000 	.word	0x40021000

08001d6c <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d70:	46c0      	nop			; (mov r8, r8)
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d84:	f7fe fa7c 	bl	8000280 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001d88:	f7ff f874 	bl	8000e74 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d8c:	46c0      	nop			; (mov r8, r8)
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <ADC1_IRQHandler>:

/**
* @brief This function handles ADC global interrupt.
*/
void ADC1_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <ADC1_IRQHandler+0x14>)
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f7fe fc8c 	bl	80006b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001da0:	46c0      	nop			; (mov r8, r8)
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	20000410 	.word	0x20000410

08001dac <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001db0:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <SystemInit+0x70>)
 8001db2:	4a1a      	ldr	r2, [pc, #104]	; (8001e1c <SystemInit+0x70>)
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	2101      	movs	r1, #1
 8001db8:	430a      	orrs	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001dbc:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <SystemInit+0x70>)
 8001dbe:	4a17      	ldr	r2, [pc, #92]	; (8001e1c <SystemInit+0x70>)
 8001dc0:	6852      	ldr	r2, [r2, #4]
 8001dc2:	4917      	ldr	r1, [pc, #92]	; (8001e20 <SystemInit+0x74>)
 8001dc4:	400a      	ands	r2, r1
 8001dc6:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001dc8:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <SystemInit+0x70>)
 8001dca:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <SystemInit+0x70>)
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	4915      	ldr	r1, [pc, #84]	; (8001e24 <SystemInit+0x78>)
 8001dd0:	400a      	ands	r2, r1
 8001dd2:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <SystemInit+0x70>)
 8001dd6:	4a11      	ldr	r2, [pc, #68]	; (8001e1c <SystemInit+0x70>)
 8001dd8:	6812      	ldr	r2, [r2, #0]
 8001dda:	4913      	ldr	r1, [pc, #76]	; (8001e28 <SystemInit+0x7c>)
 8001ddc:	400a      	ands	r2, r1
 8001dde:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001de0:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <SystemInit+0x70>)
 8001de2:	4a0e      	ldr	r2, [pc, #56]	; (8001e1c <SystemInit+0x70>)
 8001de4:	6852      	ldr	r2, [r2, #4]
 8001de6:	4911      	ldr	r1, [pc, #68]	; (8001e2c <SystemInit+0x80>)
 8001de8:	400a      	ands	r2, r1
 8001dea:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <SystemInit+0x70>)
 8001dee:	4a0b      	ldr	r2, [pc, #44]	; (8001e1c <SystemInit+0x70>)
 8001df0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001df2:	210f      	movs	r1, #15
 8001df4:	438a      	bics	r2, r1
 8001df6:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <SystemInit+0x70>)
 8001dfa:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <SystemInit+0x70>)
 8001dfc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dfe:	490c      	ldr	r1, [pc, #48]	; (8001e30 <SystemInit+0x84>)
 8001e00:	400a      	ands	r2, r1
 8001e02:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <SystemInit+0x70>)
 8001e06:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <SystemInit+0x70>)
 8001e08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	438a      	bics	r2, r1
 8001e0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001e10:	4b02      	ldr	r3, [pc, #8]	; (8001e1c <SystemInit+0x70>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]

}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	08ffb80c 	.word	0x08ffb80c
 8001e24:	fef6ffff 	.word	0xfef6ffff
 8001e28:	fffbffff 	.word	0xfffbffff
 8001e2c:	ffc0ffff 	.word	0xffc0ffff
 8001e30:	fffffeec 	.word	0xfffffeec

08001e34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e34:	480d      	ldr	r0, [pc, #52]	; (8001e6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e36:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e38:	480d      	ldr	r0, [pc, #52]	; (8001e70 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e3a:	490e      	ldr	r1, [pc, #56]	; (8001e74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e3c:	4a0e      	ldr	r2, [pc, #56]	; (8001e78 <LoopForever+0xe>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e40:	e002      	b.n	8001e48 <LoopCopyDataInit>

08001e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e46:	3304      	adds	r3, #4

08001e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e4c:	d3f9      	bcc.n	8001e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4e:	4a0b      	ldr	r2, [pc, #44]	; (8001e7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e50:	4c0b      	ldr	r4, [pc, #44]	; (8001e80 <LoopForever+0x16>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e54:	e001      	b.n	8001e5a <LoopFillZerobss>

08001e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e58:	3204      	adds	r2, #4

08001e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e5c:	d3fb      	bcc.n	8001e56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001e5e:	f7ff ffa5 	bl	8001dac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001e62:	f000 f811 	bl	8001e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e66:	f7ff fe2b 	bl	8001ac0 <main>

08001e6a <LoopForever>:

LoopForever:
    b LoopForever
 8001e6a:	e7fe      	b.n	8001e6a <LoopForever>
  ldr   r0, =_estack
 8001e6c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e74:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001e78:	08001f40 	.word	0x08001f40
  ldr r2, =_sbss
 8001e7c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001e80:	2000045c 	.word	0x2000045c

08001e84 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e84:	e7fe      	b.n	8001e84 <DMA1_Channel1_IRQHandler>
	...

08001e88 <__libc_init_array>:
 8001e88:	b570      	push	{r4, r5, r6, lr}
 8001e8a:	2600      	movs	r6, #0
 8001e8c:	4d0c      	ldr	r5, [pc, #48]	; (8001ec0 <__libc_init_array+0x38>)
 8001e8e:	4c0d      	ldr	r4, [pc, #52]	; (8001ec4 <__libc_init_array+0x3c>)
 8001e90:	1b64      	subs	r4, r4, r5
 8001e92:	10a4      	asrs	r4, r4, #2
 8001e94:	42a6      	cmp	r6, r4
 8001e96:	d109      	bne.n	8001eac <__libc_init_array+0x24>
 8001e98:	2600      	movs	r6, #0
 8001e9a:	f000 f821 	bl	8001ee0 <_init>
 8001e9e:	4d0a      	ldr	r5, [pc, #40]	; (8001ec8 <__libc_init_array+0x40>)
 8001ea0:	4c0a      	ldr	r4, [pc, #40]	; (8001ecc <__libc_init_array+0x44>)
 8001ea2:	1b64      	subs	r4, r4, r5
 8001ea4:	10a4      	asrs	r4, r4, #2
 8001ea6:	42a6      	cmp	r6, r4
 8001ea8:	d105      	bne.n	8001eb6 <__libc_init_array+0x2e>
 8001eaa:	bd70      	pop	{r4, r5, r6, pc}
 8001eac:	00b3      	lsls	r3, r6, #2
 8001eae:	58eb      	ldr	r3, [r5, r3]
 8001eb0:	4798      	blx	r3
 8001eb2:	3601      	adds	r6, #1
 8001eb4:	e7ee      	b.n	8001e94 <__libc_init_array+0xc>
 8001eb6:	00b3      	lsls	r3, r6, #2
 8001eb8:	58eb      	ldr	r3, [r5, r3]
 8001eba:	4798      	blx	r3
 8001ebc:	3601      	adds	r6, #1
 8001ebe:	e7f2      	b.n	8001ea6 <__libc_init_array+0x1e>
 8001ec0:	08001f38 	.word	0x08001f38
 8001ec4:	08001f38 	.word	0x08001f38
 8001ec8:	08001f38 	.word	0x08001f38
 8001ecc:	08001f3c 	.word	0x08001f3c

08001ed0 <memset>:
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	1882      	adds	r2, r0, r2
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d100      	bne.n	8001eda <memset+0xa>
 8001ed8:	4770      	bx	lr
 8001eda:	7019      	strb	r1, [r3, #0]
 8001edc:	3301      	adds	r3, #1
 8001ede:	e7f9      	b.n	8001ed4 <memset+0x4>

08001ee0 <_init>:
 8001ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ee6:	bc08      	pop	{r3}
 8001ee8:	469e      	mov	lr, r3
 8001eea:	4770      	bx	lr

08001eec <_fini>:
 8001eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ef2:	bc08      	pop	{r3}
 8001ef4:	469e      	mov	lr, r3
 8001ef6:	4770      	bx	lr
